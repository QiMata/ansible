- name: Normalize letsencrypt_unified variables
  ansible.builtin.set_fact:
    __letsencrypt_unified_domains: >-
      {{ security_identity_letsencrypt_unified_domains
         | default(letsencrypt_domains | default([])) | list }}
    __letsencrypt_unified_email: >-
      {{ security_identity_letsencrypt_unified_email
         | default(letsencrypt_email | default('')) }}
    __letsencrypt_unified_client: >-
      {{ security_identity_letsencrypt_unified_client
         | default(letsencrypt_client | default('auto')) }}
    __letsencrypt_unified_challenge_method: >-
      {{ security_identity_letsencrypt_unified_challenge_method
         | default(letsencrypt_challenge_method | default('dns')) }}
    __letsencrypt_unified_godaddy_api_key: >-
      {{ security_identity_letsencrypt_unified_godaddy_api_key
         | default(godaddy_api_key | default('')) }}
    __letsencrypt_unified_godaddy_api_secret: >-
      {{ security_identity_letsencrypt_unified_godaddy_api_secret
         | default(godaddy_api_secret | default('')) }}
    __letsencrypt_unified_webroot_path: >-
      {{ security_identity_letsencrypt_unified_webroot_path
         | default(webroot_path | default('/var/www/html')) }}

- name: Validate required variables
  ansible.builtin.assert:
    that:
      - __letsencrypt_unified_domains | length > 0
      - __letsencrypt_unified_email | length > 0
    fail_msg: "letsencrypt_domains and letsencrypt_email are required"

- name: Validate DNS challenge requirements
  ansible.builtin.assert:
    that:
      - __letsencrypt_unified_godaddy_api_key | length > 0
      - __letsencrypt_unified_godaddy_api_secret | length > 0
    fail_msg: "godaddy_api_key and godaddy_api_secret are required for DNS challenges"
  when: __letsencrypt_unified_challenge_method == "dns"

- name: Validate HTTP challenge requirements
  ansible.builtin.assert:
    that:
      - __letsencrypt_unified_domains | length == 1
    fail_msg: "HTTP challenges only support single domain certificates"
  when: __letsencrypt_unified_challenge_method == "http"

- name: Determine ACME client to use
  ansible.builtin.set_fact:
    _selected_client: >-
      {%- if __letsencrypt_unified_client in ['certbot', 'acme.sh'] -%}
        {{ __letsencrypt_unified_client }}
      {%- elif __letsencrypt_unified_challenge_method == "http" -%}
        certbot
      {%- elif __letsencrypt_unified_domains | length == 1 -%}
        certbot
      {%- else -%}
        acme.sh
      {%- endif -%}

- name: Show selected configuration
  ansible.builtin.debug:
    msg:
      - "Selected ACME client: {{ _selected_client }}"
      - "Challenge method: {{ __letsencrypt_unified_challenge_method }}"
      - "Domains: {{ __letsencrypt_unified_domains }}"
      - "Email: {{ __letsencrypt_unified_email }}"

- name: Use letsencrypt_setup (Certbot) for certificates
  ansible.builtin.include_role:
    name: security_identity.letsencrypt.letsencrypt_setup
  vars:
    security_identity_letsencrypt_setup_domain_name: "{{ __letsencrypt_unified_domains[0] }}"
    security_identity_letsencrypt_setup_email_address: "{{ __letsencrypt_unified_email }}"
    security_identity_letsencrypt_setup_use_godaddy: "{{ __letsencrypt_unified_challenge_method == 'dns' }}"
    security_identity_letsencrypt_setup_webroot_path: "{{ __letsencrypt_unified_webroot_path }}"
    security_identity_letsencrypt_setup_godaddy_api_key: "{{ __letsencrypt_unified_godaddy_api_key }}"
    security_identity_letsencrypt_setup_godaddy_api_secret: "{{ __letsencrypt_unified_godaddy_api_secret }}"
  when: _selected_client == "certbot"

- name: Use letsencrypt_godaddy (acme.sh) for certificates
  ansible.builtin.include_role:
    name: security_identity.letsencrypt.letsencrypt_godaddy
  vars:
    security_identity_letsencrypt_godaddy_cert_domains: "{{ __letsencrypt_unified_domains }}"
    security_identity_letsencrypt_godaddy_account_email: "{{ __letsencrypt_unified_email }}"
    security_identity_letsencrypt_godaddy_api_key: "{{ __letsencrypt_unified_godaddy_api_key }}"
    security_identity_letsencrypt_godaddy_api_secret: "{{ __letsencrypt_unified_godaddy_api_secret }}"
  when: _selected_client == "acme.sh"
