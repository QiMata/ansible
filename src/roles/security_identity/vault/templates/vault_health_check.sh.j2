#!/bin/bash
# Vault Health Check Script
# Generated by Ansible

VAULT_ADDR="{% if vault_tls_cert_src and vault_tls_key_src %}https{% else %}http{% endif %}://{{ vault_addr }}:{{ vault_port }}"
LOG_FILE="{{ vault_log_dir }}/health_check.log"

# Function to log messages
log_message() {
    echo "$(date): $1" >> "$LOG_FILE"
}

# Check Vault health
check_vault_health() {
    local health_response
    health_response=$(curl -s -w "%{http_code}" "$VAULT_ADDR/v1/sys/health" 2>/dev/null)
    local http_code="${health_response: -3}"
    
    case "$http_code" in
        200)
            log_message "HEALTHY: Vault is initialized, unsealed, and active"
            return 0
            ;;
        429)
            log_message "STANDBY: Vault is unsealed and standby"
            return 0
            ;;
        501)
            log_message "WARNING: Vault is not initialized"
            return 1
            ;;
        503)
            log_message "CRITICAL: Vault is sealed"
            return 2
            ;;
        *)
            log_message "ERROR: Vault is unreachable or returned unexpected status: $http_code"
            return 3
            ;;
    esac
}

# Check storage backend specific health
check_storage_health() {
{% if vault_storage_backend == "raft" %}
    # Check Raft cluster health
    if command -v vault >/dev/null 2>&1; then
        export VAULT_ADDR="$VAULT_ADDR"
        local raft_peers
        raft_peers=$(vault operator raft list-peers 2>/dev/null | grep -c "true" || echo "0")
        log_message "Raft cluster peers: $raft_peers"
    fi
{% elif vault_storage_backend == "consul" %}
    # Check Consul connectivity
    if curl -s "{{ vault_consul_address }}/v1/status/leader" >/dev/null 2>&1; then
        log_message "Consul backend is accessible"
    else
        log_message "WARNING: Consul backend is not accessible"
    fi
{% endif %}
}

# Check disk space
check_disk_space() {
    local usage
    usage=$(df {{ vault_data_dir if vault_storage_backend == "file" else vault_raft_path }} | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$usage" -gt 80 ]; then
        log_message "WARNING: Disk usage is ${usage}%"
    else
        log_message "Disk usage: ${usage}%"
    fi
}

# Main execution
main() {
    log_message "Starting Vault health check"
    
    check_vault_health
    vault_status=$?
    
    check_storage_health
    check_disk_space
    
    log_message "Health check completed with status: $vault_status"
    exit $vault_status
}

main "$@"
