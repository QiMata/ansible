#!/bin/bash
# Vault Backup Verification Script
# Generated by Ansible

BACKUP_DIR="{{ vault_backup_storage_path }}"
LOG_FILE="{{ vault_log_dir }}/backup_verify.log"

# Function to log messages
log_message() {
    echo "$(date): $1" | tee -a "$LOG_FILE"
}

# Function to verify backup integrity
verify_backup() {
    local backup_file="$1"
    local errors=0
    
    log_message "Verifying backup: $backup_file"
    
    # Check if file exists
    if [ ! -f "$backup_file" ]; then
        log_message "ERROR: Backup file not found: $backup_file"
        return 1
    fi
    
    # Check file permissions
    local perms=$(stat -c "%a" "$backup_file" 2>/dev/null)
    if [ "$perms" != "600" ]; then
        log_message "WARNING: Backup file permissions are $perms (should be 600)"
        errors=$((errors + 1))
    fi
    
    # Check file ownership
    local owner=$(stat -c "%U:%G" "$backup_file" 2>/dev/null)
    if [ "$owner" != "{{ vault_user }}:{{ vault_group }}" ]; then
        log_message "WARNING: Backup file ownership is $owner (should be {{ vault_user }}:{{ vault_group }})"
        errors=$((errors + 1))
    fi
    
    # Check file size (should be > 0)
    local size=$(stat -c%s "$backup_file" 2>/dev/null || echo "0")
    if [ "$size" -eq 0 ]; then
        log_message "ERROR: Backup file is empty"
        return 1
    fi
    
    log_message "Backup file size: $size bytes"
    
{% if vault_storage_backend != "raft" %}
    # For tar files, verify archive integrity
    if [[ "$backup_file" == *.tar.gz ]]; then
        if tar -tzf "$backup_file" >/dev/null 2>&1; then
            log_message "Archive integrity check: PASSED"
        else
            log_message "ERROR: Archive integrity check: FAILED"
            return 1
        fi
    fi
{% endif %}
    
    # Check backup age
    local backup_time=$(stat -c %Y "$backup_file" 2>/dev/null)
    local current_time=$(date +%s)
    local age_hours=$(( (current_time - backup_time) / 3600 ))
    
    log_message "Backup age: $age_hours hours"
    
    if [ "$age_hours" -gt 48 ]; then
        log_message "WARNING: Backup is older than 48 hours"
        errors=$((errors + 1))
    fi
    
    if [ $errors -eq 0 ]; then
        log_message "Backup verification: PASSED"
        return 0
    else
        log_message "Backup verification: FAILED ($errors issues found)"
        return 1
    fi
}

# Main execution
main() {
    log_message "Starting backup verification"
    
    local total_backups=0
    local valid_backups=0
    
    # Verify all backup files
    for backup_file in "$BACKUP_DIR"/*.snap "$BACKUP_DIR"/*.tar.gz; do
        if [ -f "$backup_file" ]; then
            total_backups=$((total_backups + 1))
            if verify_backup "$backup_file"; then
                valid_backups=$((valid_backups + 1))
            fi
            echo ""
        fi
    done
    
    log_message "Verification summary: $valid_backups/$total_backups backups are valid"
    
    if [ "$valid_backups" -eq "$total_backups" ] && [ "$total_backups" -gt 0 ]; then
        log_message "All backups passed verification"
        exit 0
    elif [ "$total_backups" -eq 0 ]; then
        log_message "WARNING: No backup files found"
        exit 1
    else
        log_message "WARNING: Some backups failed verification"
        exit 1
    fi
}

main "$@"
