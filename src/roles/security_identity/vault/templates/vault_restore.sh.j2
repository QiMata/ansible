#!/bin/bash
# Vault Restore Script
# Generated by Ansible

VAULT_ADDR="{% if vault_tls_cert_src and vault_tls_key_src %}https{% else %}http{% endif %}://{{ vault_addr }}:{{ vault_port }}"
BACKUP_DIR="{{ vault_backup_storage_path }}"
LOG_FILE="{{ vault_log_dir }}/restore.log"

# Function to log messages
log_message() {
    echo "$(date): $1" | tee -a "$LOG_FILE"
}

# Function to show usage
usage() {
    echo "Usage: $0 <backup_file>"
    echo "Example: $0 vault_snapshot_20231201_120000.snap"
    echo ""
    echo "Available backups:"
    ls -la "$BACKUP_DIR"/*.snap 2>/dev/null | tail -10
    exit 1
}

# Function to restore from backup
restore_backup() {
    local backup_file="$1"
    
    if [ ! -f "$backup_file" ]; then
        log_message "ERROR: Backup file not found: $backup_file"
        exit 1
    fi
    
    log_message "Starting restore from: $backup_file"
    
    # Stop Vault service
    log_message "Stopping Vault service"
    systemctl stop {{ vault_service_name }}
    
    # Wait for service to stop
    sleep 5

{% if vault_storage_backend == "raft" %}
    # Raft snapshot restore
    if command -v vault >/dev/null 2>&1; then
        export VAULT_ADDR="$VAULT_ADDR"
        
        # Start Vault in dev mode for restore (if needed)
        # Note: This is a simplified approach. In production, you might need
        # to restore on each node or use force flag
        
        systemctl start {{ vault_service_name }}
        sleep 10
        
        if vault operator raft snapshot restore "$backup_file" 2>>"$LOG_FILE"; then
            log_message "Raft snapshot restored successfully"
        else
            log_message "ERROR: Failed to restore Raft snapshot"
            exit 1
        fi
    else
        log_message "ERROR: Vault CLI not available for Raft restore"
        exit 1
    fi
{% else %}
    # For non-Raft backends, restore the data directory
    log_message "Backing up current data directory"
    mv "{{ vault_data_dir }}" "{{ vault_data_dir }}.backup.$(date +%s)" 2>/dev/null
    
    log_message "Creating new data directory"
    mkdir -p "{{ vault_data_dir }}"
    
    log_message "Extracting backup"
    if tar -xzf "$backup_file" -C "{{ vault_data_dir }}" 2>>"$LOG_FILE"; then
        log_message "Data directory restored successfully"
    else
        log_message "ERROR: Failed to restore data directory"
        exit 1
    fi
    
    # Fix permissions
    chown -R {{ vault_user }}:{{ vault_group }} "{{ vault_data_dir }}"
    chmod -R 750 "{{ vault_data_dir }}"
    
    # Start Vault service
    log_message "Starting Vault service"
    systemctl start {{ vault_service_name }}
{% endif %}
    
    # Wait for service to start
    sleep 10
    
    # Verify Vault is accessible
    local retries=0
    while [ $retries -lt 30 ]; do
        if curl -s "$VAULT_ADDR/v1/sys/health" >/dev/null 2>&1; then
            log_message "Vault is accessible after restore"
            break
        fi
        sleep 2
        retries=$((retries + 1))
    done
    
    if [ $retries -eq 30 ]; then
        log_message "WARNING: Vault may not be fully accessible after restore"
    fi
    
    log_message "Restore completed"
}

# Main execution
main() {
    if [ $# -ne 1 ]; then
        usage
    fi
    
    local backup_file="$1"
    
    # If relative path, assume it's in backup directory
    if [[ "$backup_file" != /* ]]; then
        backup_file="${BACKUP_DIR}/${backup_file}"
    fi
    
    # Confirmation prompt
    echo "WARNING: This will stop Vault and restore from backup!"
    echo "Backup file: $backup_file"
    echo -n "Are you sure? (yes/no): "
    read -r confirmation
    
    if [ "$confirmation" != "yes" ]; then
        echo "Restore cancelled"
        exit 0
    fi
    
    restore_backup "$backup_file"
}

main "$@"
