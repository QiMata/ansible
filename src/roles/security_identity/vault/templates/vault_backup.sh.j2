#!/bin/bash
# Vault Backup Script
# Generated by Ansible

VAULT_ADDR="{% if vault_tls_cert_src and vault_tls_key_src %}https{% else %}http{% endif %}://{{ vault_addr }}:{{ vault_port }}"
BACKUP_DIR="{{ vault_backup_storage_path }}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="vault_snapshot_${TIMESTAMP}.snap"
LOG_FILE="{{ vault_log_dir }}/backup.log"

# Function to log messages
log_message() {
    echo "$(date): $1" | tee -a "$LOG_FILE"
}

# Function to create backup
create_backup() {
    log_message "Starting Vault backup"
    
    # Check if Vault is available
    if ! curl -s "$VAULT_ADDR/v1/sys/health" >/dev/null 2>&1; then
        log_message "ERROR: Vault is not accessible"
        exit 1
    fi

{% if vault_storage_backend == "raft" %}
    # Raft snapshot
    if command -v vault >/dev/null 2>&1; then
        export VAULT_ADDR="$VAULT_ADDR"
        {% if vault_root_token is defined %}export VAULT_TOKEN="{{ vault_root_token }}"{% endif %}
        
        if vault operator raft snapshot save "${BACKUP_DIR}/${BACKUP_FILE}" 2>>"$LOG_FILE"; then
            log_message "Raft snapshot created: ${BACKUP_FILE}"
        else
            log_message "ERROR: Failed to create Raft snapshot"
            exit 1
        fi
    else
        log_message "ERROR: Vault CLI not available for Raft snapshot"
        exit 1
    fi
{% else %}
    # For non-Raft backends, backup the data directory
    if [ -d "{{ vault_data_dir }}" ]; then
        tar -czf "${BACKUP_DIR}/${BACKUP_FILE}" -C "{{ vault_data_dir }}" . 2>>"$LOG_FILE"
        if [ $? -eq 0 ]; then
            log_message "Data directory backup created: ${BACKUP_FILE}"
        else
            log_message "ERROR: Failed to create data directory backup"
            exit 1
        fi
    else
        log_message "ERROR: Data directory not found"
        exit 1
    fi
{% endif %}

    # Create configuration backup
    CONFIG_BACKUP="vault_config_${TIMESTAMP}.tar.gz"
    tar -czf "${BACKUP_DIR}/${CONFIG_BACKUP}" -C "{{ vault_config_dir }}" . 2>>"$LOG_FILE"
    
    if [ $? -eq 0 ]; then
        log_message "Configuration backup created: ${CONFIG_BACKUP}"
    else
        log_message "WARNING: Failed to create configuration backup"
    fi

    # Set proper permissions
    chown {{ vault_user }}:{{ vault_group }} "${BACKUP_DIR}/${BACKUP_FILE}" "${BACKUP_DIR}/${CONFIG_BACKUP}" 2>/dev/null
    chmod 600 "${BACKUP_DIR}/${BACKUP_FILE}" "${BACKUP_DIR}/${CONFIG_BACKUP}" 2>/dev/null

    log_message "Backup completed successfully"
}

# Function to verify backup
verify_backup() {
    local backup_file="$1"
    
    if [ ! -f "$backup_file" ]; then
        log_message "ERROR: Backup file not found: $backup_file"
        return 1
    fi
    
    # Check file size
    local size=$(stat -c%s "$backup_file" 2>/dev/null || echo "0")
    if [ "$size" -eq 0 ]; then
        log_message "ERROR: Backup file is empty: $backup_file"
        return 1
    fi
    
{% if vault_storage_backend == "raft" %}
    # For Raft snapshots, we can't easily verify without restoring
    log_message "Backup file exists and has content: ${backup_file} (${size} bytes)"
{% else %}
    # For tar files, verify the archive
    if tar -tzf "$backup_file" >/dev/null 2>&1; then
        log_message "Backup file verified: ${backup_file} (${size} bytes)"
    else
        log_message "ERROR: Backup file appears corrupted: $backup_file"
        return 1
    fi
{% endif %}
    
    return 0
}

# Main execution
main() {
    # Create backup directory if it doesn't exist
    mkdir -p "$BACKUP_DIR"
    
    # Create backup
    create_backup
    
    # Verify backup
    verify_backup "${BACKUP_DIR}/${BACKUP_FILE}"
    
    log_message "Backup process completed"
}

main "$@"
