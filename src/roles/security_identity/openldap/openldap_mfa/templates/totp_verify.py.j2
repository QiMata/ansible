#!/usr/bin/env python3
"""
TOTP Verification Script for OpenLDAP MFA
Generated by Ansible
"""

import sys
import time
import hmac
import hashlib
import struct
import base64
import ldap3
import logging
from datetime import datetime

# Configuration
TOTP_ISSUER = "{{ openldap_mfa_totp_issuer }}"
TOTP_WINDOW_SIZE = {{ openldap_mfa_totp_window_size }}
TOTP_TIME_STEP = {{ openldap_mfa_totp_time_step }}
LDAP_BASE_DN = "{{ openldap_server_base_dn }}"
LDAP_URI = "{{ openldap_server_uri | default('ldapi:///') }}"

{% if openldap_mfa_audit_enabled %}
# Setup logging
logging.basicConfig(
    filename="{{ openldap_mfa_audit_log }}",
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
{% endif %}

def generate_totp(secret, timestamp=None):
    """Generate TOTP code from secret."""
    if timestamp is None:
        timestamp = int(time.time())
    
    # Convert timestamp to time step
    time_step = timestamp // TOTP_TIME_STEP
    
    # Convert to bytes
    time_bytes = struct.pack('>Q', time_step)
    
    # Decode base32 secret
    try:
        key = base64.b32decode(secret.upper())
    except Exception:
        return None
    
    # Generate HMAC
    hmac_digest = hmac.new(key, time_bytes, hashlib.sha1).digest()
    
    # Dynamic truncation
    offset = hmac_digest[-1] & 0x0f
    code = struct.unpack('>I', hmac_digest[offset:offset+4])[0]
    code &= 0x7fffffff
    code %= 1000000
    
    return f"{code:06d}"

def verify_totp(username, provided_code):
    """Verify TOTP code for user."""
    try:
        # Connect to LDAP
        server = ldap3.Server(LDAP_URI)
        conn = ldap3.Connection(server, auto_bind=True)
        
        # Search for user's TOTP secret
        search_filter = f"(uid={username})"
        conn.search(
            LDAP_BASE_DN,
            search_filter,
            attributes=['totpSecret', 'totpLastUsed']
        )
        
        if not conn.entries:
            {% if openldap_mfa_audit_enabled %}
            logging.warning(f"TOTP verification failed - user not found: {username}")
            {% endif %}
            return False
        
        entry = conn.entries[0]
        secret = entry.totpSecret.value if hasattr(entry, 'totpSecret') else None
        
        if not secret:
            {% if openldap_mfa_audit_enabled %}
            logging.warning(f"TOTP verification failed - no secret configured: {username}")
            {% endif %}
            return False
        
        # Check current time and window
        current_time = int(time.time())
        
        for i in range(-TOTP_WINDOW_SIZE, TOTP_WINDOW_SIZE + 1):
            test_time = current_time + (i * TOTP_TIME_STEP)
            expected_code = generate_totp(secret, test_time)
            
            if expected_code == provided_code:
                # Update last used timestamp
                conn.modify(
                    entry.entry_dn,
                    {'totpLastUsed': [(ldap3.MODIFY_REPLACE, [str(current_time)])]}
                )
                
                {% if openldap_mfa_audit_enabled %}
                logging.info(f"TOTP verification successful: {username}")
                {% endif %}
                return True
        
        {% if openldap_mfa_audit_enabled %}
        logging.warning(f"TOTP verification failed - invalid code: {username}")
        {% endif %}
        return False
        
    except Exception as e:
        {% if openldap_mfa_audit_enabled %}
        logging.error(f"TOTP verification error for {username}: {str(e)}")
        {% endif %}
        return False
    finally:
        if 'conn' in locals():
            conn.unbind()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: ldap-totp-verify <username> <totp_code>")
        sys.exit(1)
    
    username = sys.argv[1]
    totp_code = sys.argv[2]
    
    if verify_totp(username, totp_code):
        print("TOTP verification successful")
        sys.exit(0)
    else:
        print("TOTP verification failed")
        sys.exit(1)
