#!/bin/bash
# SnapCA Certificate Renewal Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
STEPPATH="{{ snapca_client_step_config_dir }}"
CERT_FILE="{{ snapca_client_certificate_path }}/{{ snapca_client_certificate_name }}.crt"
KEY_FILE="{{ snapca_client_private_key_path }}/{{ snapca_client_certificate_name }}.key"
FULLCHAIN_FILE="{{ snapca_client_certificate_path }}/{{ snapca_client_certificate_name }}-fullchain.crt"
RENEWAL_THRESHOLD="{{ snapca_client_renewal_threshold }}"
LOG_FILE="/var/log/snapca-renewal.log"

# Domains and configuration
DOMAINS=({% for domain in snapca_client_domains %}"{{ domain }}" {% endfor %})
{% if snapca_client_san %}
SAN_LIST=({% for san in snapca_client_san %}"{{ san }}" {% endfor %})
{% endif %}

# Provisioner configuration
PROVISIONER="{{ snapca_client_provisioner }}"
PROVISIONER_TYPE="{{ snapca_client_provisioner_type }}"

# Authentication
{% if snapca_client_token %}
TOKEN="{{ snapca_client_token }}"
{% endif %}
{% if snapca_client_password %}
PASSWORD="{{ snapca_client_password }}"
{% endif %}
{% if snapca_client_oidc_client_id %}
OIDC_CLIENT_ID="{{ snapca_client_oidc_client_id }}"
OIDC_CLIENT_SECRET="{{ snapca_client_oidc_client_secret }}"
{% endif %}

# Services to reload
RELOAD_SERVICES=({% for service in snapca_client_reload_services %}"{{ service }}" {% endfor %})

# Post-renewal commands
POST_RENEWAL_COMMANDS=(
{% for cmd in snapca_client_post_renewal_commands %}
"{{ cmd }}"
{% endfor %}
)

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Check if certificate needs renewal
check_renewal_needed() {
    if [ ! -f "$CERT_FILE" ]; then
        log "Certificate file does not exist, renewal needed"
        return 0
    fi
    
    export STEPPATH
    if ! step certificate verify "$CERT_FILE" --roots "$STEPPATH/certs/root_ca.crt" >/dev/null 2>&1; then
        log "Certificate verification failed, renewal needed"
        return 0
    fi
    
    # Check if certificate expires within threshold
    if step certificate inspect "$CERT_FILE" --format json | jq -r '.validity.end' | xargs -I {} step certificate verify "$CERT_FILE" --roots "$STEPPATH/certs/root_ca.crt" --not-after "$(date -d "$RENEWAL_THRESHOLD" +%Y-%m-%dT%H:%M:%SZ)" >/dev/null 2>&1; then
        log "Certificate is still valid beyond renewal threshold"
        return 1
    else
        log "Certificate expires within renewal threshold, renewal needed"
        return 0
    fi
}

# Renew certificate
renew_certificate() {
    log "Starting certificate renewal for ${DOMAINS[0]}"
    
    # Build domain arguments
    DOMAIN_ARGS=""
    for domain in "${DOMAINS[@]}"; do
        DOMAIN_ARGS="$DOMAIN_ARGS --san $domain"
    done
    
{% if snapca_client_san %}
    # Add SAN arguments
    for san in "${SAN_LIST[@]}"; do
        DOMAIN_ARGS="$DOMAIN_ARGS --san $san"
    done
{% endif %}
    
    # Backup existing certificate
    if [ -f "$CERT_FILE" ]; then
        cp "$CERT_FILE" "${CERT_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
        log "Backed up existing certificate"
    fi
    
    export STEPPATH
    
    case "$PROVISIONER_TYPE" in
        "jwk")
{% if snapca_client_token %}
            step ca certificate "${DOMAINS[0]}" "$CERT_FILE" \
                --key "$KEY_FILE" \
                --provisioner "$PROVISIONER" \
                --token "$TOKEN" \
                $DOMAIN_ARGS \
{% if snapca_client_validity_duration %}                --lifetime "{{ snapca_client_validity_duration }}" \{% endif %}
                --force
{% else %}
            log "ERROR: JWK token not configured"
            exit 1
{% endif %}
            ;;
        "password")
{% if snapca_client_password %}
            echo "$PASSWORD" | step ca certificate "${DOMAINS[0]}" "$CERT_FILE" \
                --key "$KEY_FILE" \
                --provisioner "$PROVISIONER" \
                $DOMAIN_ARGS \
{% if snapca_client_validity_duration %}                --lifetime "{{ snapca_client_validity_duration }}" \{% endif %}
                --force \
                --password-file /dev/stdin
{% else %}
            log "ERROR: Password not configured"
            exit 1
{% endif %}
            ;;
        "oidc")
{% if snapca_client_oidc_client_id %}
            step ca certificate "${DOMAINS[0]}" "$CERT_FILE" \
                --key "$KEY_FILE" \
                --provisioner "$PROVISIONER" \
                --oidc-client-id "$OIDC_CLIENT_ID" \
                --oidc-client-secret "$OIDC_CLIENT_SECRET" \
                $DOMAIN_ARGS \
{% if snapca_client_validity_duration %}                --lifetime "{{ snapca_client_validity_duration }}" \{% endif %}
                --force
{% else %}
            log "ERROR: OIDC credentials not configured"
            exit 1
{% endif %}
            ;;
        "acme")
            step ca certificate "${DOMAINS[0]}" "$CERT_FILE" \
                --key "$KEY_FILE" \
                --provisioner "$PROVISIONER" \
                $DOMAIN_ARGS \
{% if snapca_client_validity_duration %}                --lifetime "{{ snapca_client_validity_duration }}" \{% endif %}
                --acme \
                --force
            ;;
        *)
            log "ERROR: Unknown provisioner type: $PROVISIONER_TYPE"
            exit 1
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        log "Certificate renewal successful"
        
        # Create full chain
        cat "$CERT_FILE" "$STEPPATH/certs/root_ca.crt" > "$FULLCHAIN_FILE"
        log "Created full chain certificate"
        
        # Set permissions
        chmod 644 "$CERT_FILE" "$FULLCHAIN_FILE"
        chmod 600 "$KEY_FILE"
        
        return 0
    else
        log "ERROR: Certificate renewal failed"
        return 1
    fi
}

# Reload services
reload_services() {
    for service in "${RELOAD_SERVICES[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log "Reloading service: $service"
            systemctl reload "$service"
            if [ $? -eq 0 ]; then
                log "Successfully reloaded $service"
            else
                log "WARNING: Failed to reload $service"
            fi
        else
            log "WARNING: Service $service is not active, skipping reload"
        fi
    done
}

# Execute post-renewal commands
execute_post_renewal_commands() {
    for cmd in "${POST_RENEWAL_COMMANDS[@]}"; do
        log "Executing post-renewal command: $cmd"
        eval "$cmd"
        if [ $? -eq 0 ]; then
            log "Successfully executed: $cmd"
        else
            log "WARNING: Failed to execute: $cmd"
        fi
    done
}

# Main execution
main() {
    log "SnapCA renewal check started"
    
    if check_renewal_needed; then
        if renew_certificate; then
            log "Certificate renewal completed successfully"
            reload_services
            execute_post_renewal_commands
            log "SnapCA renewal process completed"
        else
            log "ERROR: Certificate renewal failed"
            exit 1
        fi
    else
        log "Certificate renewal not needed"
    fi
}

# Run main function
main "$@"
