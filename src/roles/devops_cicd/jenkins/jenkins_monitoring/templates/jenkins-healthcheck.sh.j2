#!/bin/bash

# Jenkins Health Check Script
# Generated by Ansible jenkins_monitoring role

JENKINS_URL="http://{{ ansible_default_ipv4.address }}:{{ jenkins_http_port | default(8080) }}"
TIMEOUT={{ jenkins_monitoring_healthcheck_timeout }}
RETRIES={{ jenkins_monitoring_healthcheck_retries }}
ALERT_EMAIL="{{ jenkins_monitoring_alert_email }}"

LOG_FILE="/var/log/jenkins-monitoring/healthcheck.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" >> "$LOG_FILE"
}

# Function to send alert
send_alert() {
    local subject="$1"
    local message="$2"
    
    echo "$message" | mail -s "$subject" "$ALERT_EMAIL" 2>/dev/null || true
    log_message "ALERT: $subject - $message"
}

# Function to check Jenkins endpoint
check_endpoint() {
    local endpoint="$1"
    local url="${JENKINS_URL}${endpoint}"
    
    for i in $(seq 1 $RETRIES); do
        if curl -s --max-time "$TIMEOUT" "$url" > /dev/null 2>&1; then
            log_message "SUCCESS: Endpoint $endpoint is accessible (attempt $i)"
            return 0
        fi
        log_message "WARNING: Endpoint $endpoint check failed (attempt $i)"
        sleep 5
    done
    
    log_message "ERROR: Endpoint $endpoint is not accessible after $RETRIES attempts"
    return 1
}

# Function to check disk space
check_disk_space() {
    local jenkins_home="{{ jenkins_controller_home | default('/var/lib/jenkins') }}"
    local usage=$(df "$jenkins_home" | tail -1 | awk '{print $5}' | sed 's/%//')
    
    log_message "INFO: Jenkins home disk usage: ${usage}%"
    
    if [ "$usage" -ge {{ jenkins_monitoring_disk_critical_threshold }} ]; then
        send_alert "Jenkins Disk Space Critical" "Jenkins disk usage is at ${usage}%, exceeding critical threshold of {{ jenkins_monitoring_disk_critical_threshold }}%"
        return 2
    elif [ "$usage" -ge {{ jenkins_monitoring_disk_warning_threshold }} ]; then
        send_alert "Jenkins Disk Space Warning" "Jenkins disk usage is at ${usage}%, exceeding warning threshold of {{ jenkins_monitoring_disk_warning_threshold }}%"
        return 1
    fi
    
    return 0
}

# Function to check memory usage
check_memory_usage() {
    local memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    
    log_message "INFO: System memory usage: ${memory_usage}%"
    
    if [ "$memory_usage" -ge {{ jenkins_monitoring_memory_critical_threshold }} ]; then
        send_alert "Jenkins Memory Usage Critical" "System memory usage is at ${memory_usage}%, exceeding critical threshold of {{ jenkins_monitoring_memory_critical_threshold }}%"
        return 2
    elif [ "$memory_usage" -ge {{ jenkins_monitoring_memory_warning_threshold }} ]; then
        send_alert "Jenkins Memory Usage Warning" "System memory usage is at ${memory_usage}%, exceeding warning threshold of {{ jenkins_monitoring_memory_warning_threshold }}%"
        return 1
    fi
    
    return 0
}

# Function to check Jenkins service
check_jenkins_service() {
    if ! systemctl is-active --quiet jenkins; then
        log_message "ERROR: Jenkins service is not running"
        send_alert "Jenkins Service Down" "Jenkins service is not running on {{ ansible_hostname }}"
        return 1
    fi
    
    log_message "SUCCESS: Jenkins service is running"
    return 0
}

# Main health check
main() {
    log_message "INFO: Starting Jenkins health check"
    
    local exit_code=0
    
    # Check Jenkins service
    if ! check_jenkins_service; then
        exit_code=1
    fi
    
    # Check endpoints
{% for endpoint in jenkins_monitoring_healthcheck_endpoints %}
    if ! check_endpoint "{{ endpoint }}"; then
        exit_code=1
    fi
{% endfor %}
    
    # Check disk space
    check_disk_space
    local disk_status=$?
    if [ $disk_status -gt $exit_code ]; then
        exit_code=$disk_status
    fi
    
    # Check memory usage
    check_memory_usage
    local memory_status=$?
    if [ $memory_status -gt $exit_code ]; then
        exit_code=$memory_status
    fi
    
    if [ $exit_code -eq 0 ]; then
        log_message "SUCCESS: All health checks passed"
    else
        log_message "WARNING: Some health checks failed (exit code: $exit_code)"
    fi
    
    log_message "INFO: Health check completed"
    return $exit_code
}

# Run the health check
main
