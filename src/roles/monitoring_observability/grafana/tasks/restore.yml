---
- name: Validate restore source path
  ansible.builtin.stat:
    path: "{{ grafana_restore_from_path }}"
  register: restore_source_check
  failed_when: not restore_source_check.stat.exists

- name: Stop Grafana service before restore
  ansible.builtin.systemd:
    name: grafana-server
    state: stopped

- name: Create pre-restore backup
  community.general.archive:
    path: /var/lib/grafana
    dest: "{{ grafana_backup_path }}/pre-restore-backup-{{ ansible_date_time.epoch }}.tar.gz"
    format: gz
    mode: '0600'
  become_user: grafana
  become: true

- name: Restore Grafana database (SQLite)
  ansible.builtin.copy:
    src: "{{ grafana_restore_from_path }}/grafana.db"
    dest: /var/lib/grafana/grafana.db
    owner: grafana
    group: grafana
    mode: '0640'
    backup: true
  when:
    - grafana_database.type == 'sqlite3'
    - restore_source_check.stat.exists

- name: Restore Grafana database (SQL dump)
  when: grafana_database.type != 'sqlite3'
  block:
    - name: Check for SQL dump file
      ansible.builtin.stat:
        path: "{{ grafana_restore_from_path }}/grafana.sql"
      register: sql_dump_check

    - name: Import SQL dump to PostgreSQL
      community.postgresql.postgresql_db:
        name: "{{ grafana_database.name }}"
        state: restore
        target: "{{ grafana_restore_from_path }}/grafana.sql"
        login_host: "{{ grafana_database.host.split(':')[0] }}"
        login_port: "{{ grafana_database.host.split(':')[1] | default('5432') }}"
        login_user: "{{ grafana_database.user }}"
        login_password: "{{ grafana_database.password }}"
      when:
        - grafana_database.type == 'postgres'
        - sql_dump_check.stat.exists

    - name: Import SQL dump to MySQL
      community.mysql.mysql_db:
        name: "{{ grafana_database.name }}"
        state: import
        target: "{{ grafana_restore_from_path }}/grafana.sql"
        login_host: "{{ grafana_database.host.split(':')[0] }}"
        login_port: "{{ grafana_database.host.split(':')[1] | default('3306') }}"
        login_user: "{{ grafana_database.user }}"
        login_password: "{{ grafana_database.password }}"
      when:
        - grafana_database.type == 'mysql'
        - sql_dump_check.stat.exists

- name: Restore Grafana configuration files
  ansible.builtin.copy:
    src: "{{ grafana_restore_from_path }}/etc/grafana/"
    dest: /etc/grafana/
    owner: grafana
    group: grafana
    mode: preserve
    backup: true
  when: restore_source_check.stat.isdir

- name: Restore Grafana data directory
  ansible.builtin.copy:
    src: "{{ grafana_restore_from_path }}/var/lib/grafana/"
    dest: /var/lib/grafana/
    owner: grafana
    group: grafana
    mode: preserve
    backup: true
  when: restore_source_check.stat.isdir

- name: Restore Grafana plugins
  ansible.builtin.copy:
    src: "{{ grafana_restore_from_path }}/var/lib/grafana/plugins/"
    dest: /var/lib/grafana/plugins/
    owner: grafana
    group: grafana
    mode: preserve
  when:
    - restore_source_check.stat.isdir
    - grafana_plugins_enabled

- name: Set correct permissions after restore
  ansible.builtin.file:
    path: "{{ item }}"
    owner: grafana
    group: grafana
    recurse: true
  loop:
    - /var/lib/grafana
    - /etc/grafana

- name: Start Grafana service after restore
  ansible.builtin.systemd:
    name: grafana-server
    state: started
    daemon_reload: true

- name: Wait for Grafana to be available after restore
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/health"
    method: GET
    status_code: 200
  register: restore_health_check
  until: restore_health_check.status == 200
  retries: 30
  delay: 10

- name: Verify restore by checking admin user
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/user"
    method: GET
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    status_code: 200
  register: admin_verification

- name: Display restore status
  ansible.builtin.debug:
    msg: "Grafana restore completed successfully. Admin user: {{ admin_verification.json.login }}"
  when: admin_verification.status == 200

- name: Create restore completion marker
  ansible.builtin.copy:
    content: |
      Grafana restore completed on {{ ansible_date_time.iso8601 }}
      Restored from: {{ grafana_restore_from_path }}
      Database type: {{ grafana_database.type }}
      Admin user verified: {{ admin_verification.json.login | default('unknown') }}
    dest: /var/lib/grafana/restore_completed.txt
    owner: grafana
    group: grafana
    mode: '0644'

- name: Run post-restore health checks
  ansible.builtin.import_tasks: monitoring.yml
  when: grafana_monitoring_enabled

- name: Validate restored dashboards
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/search"
    method: GET
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    status_code: 200
  register: restored_dashboards

- name: Display restored dashboard count
  ansible.builtin.debug:
    msg: "Restore verification: {{ restored_dashboards.json | length }} dashboards found"
  when: restored_dashboards.json is defined
