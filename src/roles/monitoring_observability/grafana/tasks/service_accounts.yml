---
- name: Get existing service accounts
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/serviceaccounts/search"
    method: GET
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    status_code: 200
  register: existing_service_accounts

- name: Create service accounts
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/serviceaccounts"
    method: POST
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    body_format: json
    body:
      name: "{{ item.name }}"
      role: "{{ item.role }}"
      isDisabled: "{{ item.is_disabled | default(false) }}"
    status_code: [201, 409]  # 409 if service account already exists
  loop: "{{ grafana_service_accounts }}"
  register: service_account_creation_result
  when: item.name not in (existing_service_accounts.json.serviceAccounts | default([]) | map(attribute='name') | list)

- name: Get updated service accounts list
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/serviceaccounts/search"
    method: GET
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    status_code: 200
  register: updated_service_accounts

- name: Create service account tokens
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/serviceaccounts/{{ sa_lookup.id }}/tokens"
    method: POST
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    body_format: json
    body:
      name: "{{ item.name }}-token"
      secondsToLive: "{{ item.token_seconds_to_live | default(null) }}"
    status_code: 200
  loop: "{{ grafana_service_accounts }}"
  vars:
    sa_lookup: "{{ updated_service_accounts.json.serviceAccounts | selectattr('name', 'equalto', item.name) | first }}"
  register: service_account_token_result
  when:
    - sa_lookup is defined
    - item.create_token | default(true)
  no_log: true

- name: Store service account tokens securely
  ansible.builtin.copy:
    content: |
      # Grafana Service Account Tokens
      # Generated on {{ ansible_date_time.iso8601 }}
      {% for result in service_account_token_result.results %}
      {% if result.json is defined %}
      # {{ result.item.name }} service account token
      {{ result.item.name | upper | replace('-', '_') }}_SA_TOKEN="{{ result.json.key }}"
      {% endif %}
      {% endfor %}
    dest: "/etc/grafana/service_account_tokens.env"
    owner: grafana
    group: grafana
    mode: '0600'
  when: service_account_token_result.results | selectattr('json', 'defined') | list | length > 0
  no_log: true

- name: Display service account information
  ansible.builtin.debug:
    msg: "Service account '{{ item.name }}' created with role {{ item.role }}"
  loop: "{{ grafana_service_accounts }}"
  when: ansible_verbosity >= 1

- name: Update service account status
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/serviceaccounts/{{ sa_lookup.id }}"
    method: PATCH
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    body_format: json
    body:
      isDisabled: "{{ item.is_disabled | default(false) }}"
    status_code: 200
  loop: "{{ grafana_service_accounts }}"
  vars:
    sa_lookup: "{{ updated_service_accounts.json.serviceAccounts | selectattr('name', 'equalto', item.name) | first }}"
  when:
    - sa_lookup is defined
    - item.is_disabled is defined

- name: Validate service account tokens
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/user"
    method: GET
    headers:
      Authorization: "Bearer {{ result.json.key }}"
    status_code: 200
  loop: "{{ service_account_token_result.results }}"
  loop_control:
    loop_var: result
  register: service_account_validation
  when:
    - result.json is defined
    - result.item.validate_token | default(true)
  no_log: true

- name: Display token validation results
  ansible.builtin.debug:
    msg: "Service account token for '{{ result.item.name }}' is {{ 'valid' if result.status == 200 else 'invalid' }}"
  loop: "{{ service_account_validation.results }}"
  loop_control:
    loop_var: result
  when:
    - result.status is defined
    - ansible_verbosity >= 1
