---
- name: Check current database configuration
  ansible.builtin.stat:
    path: /var/lib/grafana/grafana.db
  register: sqlite_db_check

- name: Create database backup before migration
  ansible.builtin.copy:
    src: /var/lib/grafana/grafana.db
    dest: "{{ grafana_backup_path }}/grafana-pre-migration-{{ ansible_date_time.epoch }}.db"
    remote_src: true
    owner: grafana
    group: grafana
    mode: '0640'
  when:
    - grafana_database_backup_before_migration
    - sqlite_db_check.stat.exists
    - grafana_database.type != 'sqlite3'

- name: Stop Grafana before migration
  ansible.builtin.systemd:
    name: grafana-server
    state: stopped
  when: grafana_database.type != 'sqlite3'

- name: Export Grafana database to SQL dump
  ansible.builtin.shell: |
    sqlite3 /var/lib/grafana/grafana.db .dump > {{ grafana_backup_path }}/grafana-export-{{ ansible_date_time.epoch }}.sql
  become_user: grafana
  become: true
  changed_when: false
  when:
    - sqlite_db_check.stat.exists
    - grafana_database.type != 'sqlite3'

- name: Create target database (MySQL)
  community.mysql.mysql_db:
    name: "{{ grafana_database.name }}"
    state: present
    login_host: "{{ grafana_database.host.split(':')[0] }}"
    login_port: "{{ grafana_database.host.split(':')[1] | default('3306') }}"
    login_user: "{{ grafana_database.user }}"
    login_password: "{{ grafana_database.password }}"
  when:
    - grafana_database.type == 'mysql'
    - sqlite_db_check.stat.exists

- name: Create target database (PostgreSQL)
  community.postgresql.postgresql_db:
    name: "{{ grafana_database.name }}"
    state: present
    login_host: "{{ grafana_database.host.split(':')[0] }}"
    login_port: "{{ grafana_database.host.split(':')[1] | default('5432') }}"
    login_user: "{{ grafana_database.user }}"
    login_password: "{{ grafana_database.password }}"
  when:
    - grafana_database.type == 'postgres'
    - sqlite_db_check.stat.exists

- name: Initialize new database schema
  ansible.builtin.command:
    cmd: grafana-server --config=/etc/grafana/grafana.ini --homepath=/usr/share/grafana cfg:default.paths.data=/var/lib/grafana
  become_user: grafana
  become: true
  changed_when: false
  environment:
    GF_DATABASE_TYPE: "{{ grafana_database.type }}"
    GF_DATABASE_HOST: "{{ grafana_database.host }}"
    GF_DATABASE_NAME: "{{ grafana_database.name }}"
    GF_DATABASE_USER: "{{ grafana_database.user }}"
    GF_DATABASE_PASSWORD: "{{ grafana_database.password }}"
  when:
    - grafana_database.type != 'sqlite3'
    - sqlite_db_check.stat.exists

- name: Remove old SQLite database after successful migration
  ansible.builtin.file:
    path: /var/lib/grafana/grafana.db
    state: absent
  when:
    - grafana_database.type != 'sqlite3'
    - sqlite_db_check.stat.exists

- name: Start Grafana after migration
  ansible.builtin.systemd:
    name: grafana-server
    state: started
  when: grafana_database.type != 'sqlite3'

- name: Verify migration success
  ansible.builtin.uri:
    url: "{{ grafana_protocol }}://{{ grafana_domain }}:{{ grafana_http_port }}/api/health"
    method: GET
    status_code: 200
  register: migration_health_check
  until: migration_health_check.status == 200
  retries: 15
  delay: 10
  when: grafana_database.type != 'sqlite3'
