# HAProxy Configuration - Generated by Ansible
# Version: {{ ansible_date_time.iso8601 }}

global
{% for line in haproxy_global_vars %}
    {{ line }}
{% endfor %}
    maxconn {{ haproxy_global_maxconn | default(4096) }}
    stats socket {{ haproxy_runtime_api.socket_path | default('/run/haproxy/admin.sock') }} mode {{ haproxy_runtime_api.socket_mode | default('660') }} level {{ haproxy_runtime_api.socket_level | default('admin') }} expose-fd listeners
    pidfile /run/haproxy.pid
    
{% if haproxy_global_ssl_default_bind_ciphers is defined %}
    ssl-default-bind-ciphers {{ haproxy_global_ssl_default_bind_ciphers }}
{% endif %}
{% if haproxy_global_ssl_default_bind_options is defined %}
    ssl-default-bind-options {{ haproxy_global_ssl_default_bind_options }}
{% endif %}

{% if haproxy_security.hide_version | default(true) %}
    # Hide HAProxy version
    stats hide-version
{% endif %}

{% if haproxy_peers.enable | default(false) and haproxy_peers.peers | length > 0 %}
peers haproxy_cluster
{% for peer in haproxy_peers.peers %}
    peer {{ peer.name }} {{ peer.address }}
{% endfor %}
{% endif %}

{% if haproxy_caching.enable | default(false) and haproxy_caching.caches | length > 0 %}
# Cache Configuration
{% for cache in haproxy_caching.caches %}
cache {{ cache.name }}
    total-max-size {{ cache.total_max_size | default('256m') }}
    max-object-size {{ cache.max_object_size | default('10m') }}
    max-age {{ cache.max_age | default('3600s') }}
{% endfor %}
{% endif %}

defaults
{% for line in haproxy_defaults_vars %}
    {{ line }}
{% endfor %}
{% if haproxy_defaults_retries is defined %}
    retries {{ haproxy_defaults_retries }}
{% endif %}
{% if haproxy_defaults_option_redispatch | default(false) %}
    option redispatch
{% endif %}
{% if haproxy_defaults_compression | default(false) %}
    compression algo {{ haproxy_compression.algorithms | join(' ') }}
    compression type {{ haproxy_compression.types | join(' ') }}
{% endif %}

{% if haproxy_custom_logging.enable | default(false) %}
    # Custom logging format
{% if haproxy_custom_logging.log_format %}
    log-format "{{ haproxy_custom_logging.log_format }}"
{% endif %}
{% for header in haproxy_custom_logging.capture_headers | default([]) %}
    capture request header {{ header }} len 64
{% endfor %}
{% endif %}

# Rate Limiting Tables
{% if haproxy_rate_limiting.enable | default(false) %}
backend rate_limit_table
    stick-table type {{ haproxy_rate_limiting.stick_table_type | default('ip') }} size {{ haproxy_rate_limiting.stick_table_size | default('100k') }} expire {{ haproxy_rate_limiting.stick_table_expire | default('30s') }} store http_req_rate(10s)
{% endif %}

{% if haproxy_stats_enable %}
# Statistics Interface
listen stats
    bind {{ haproxy_stats_bind_address }}:{{ haproxy_stats_port }}
    mode http
    stats enable
    stats uri {{ haproxy_stats_uri | default('/haproxy?stats') }}
    stats refresh {{ haproxy_stats_refresh | default('10s') }}
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
{% if haproxy_stats_hide_version | default(true) %}
    stats hide-version
{% endif %}
    stats admin if TRUE
{% endif %}

{% if haproxy_prometheus.enable | default(false) %}
# Prometheus Metrics
listen prometheus
    bind {{ haproxy_prometheus.bind_address | default('127.0.0.1') }}:{{ haproxy_prometheus.port | default(9101) }}
    mode http
    http-request use-service prometheus-exporter if { path {{ haproxy_prometheus.uri | default('/metrics') }} }
    no log
{% endif %}

# Multiple Frontends Configuration
{% if haproxy_frontends is defined and haproxy_frontends | length > 0 %}
{% for frontend in haproxy_frontends %}
frontend {{ frontend.name }}
    bind {{ frontend.bind_address | default('*') }}:{{ frontend.port }}{% if frontend.ssl_certificate %} ssl crt {{ frontend.ssl_certificate }}{% endif %}{% if haproxy_ssl_certificates | length > 0 %} ssl crt-list /etc/haproxy/certs/{% endif %}
    mode {{ frontend.mode | default('http') }}
{% if frontend.maxconn is defined %}
    maxconn {{ frontend.maxconn }}
{% endif %}

{% if haproxy_ip_restrictions.whitelist | length > 0 %}
    # IP Whitelist
{% for ip in haproxy_ip_restrictions.whitelist %}
    acl whitelist_ip src {{ ip }}
{% endfor %}
    http-request deny unless whitelist_ip
{% endif %}

{% if haproxy_ip_restrictions.blacklist | length > 0 %}
    # IP Blacklist
{% for ip in haproxy_ip_restrictions.blacklist %}
    acl blacklist_ip src {{ ip }}
{% endfor %}
    http-request deny if blacklist_ip
{% endif %}

{% if haproxy_security.request_filtering.enable | default(false) %}
    # Request Filtering
{% for method in haproxy_security.request_filtering.block_methods | default([]) %}
    acl blocked_method method {{ method }}
{% endfor %}
{% if haproxy_security.request_filtering.block_methods | default([]) | length > 0 %}
    http-request deny if blocked_method
{% endif %}
{% if haproxy_security.request_filtering.max_header_size is defined %}
    http-request deny if { req.hdr_cnt(host) gt 1 }
{% endif %}
{% endif %}

{% if haproxy_rate_limiting.enable | default(false) %}
    # Rate Limiting
    stick-table type ip size {{ haproxy_rate_limiting.stick_table_size | default('100k') }} expire {{ haproxy_rate_limiting.stick_table_expire | default('30s') }} store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt {{ haproxy_rate_limiting.http_req_rate | default(20) }} }
    http-request tarpit if { sc_http_req_rate(0) gt {{ haproxy_rate_limiting.http_req_burst | default(50) }} }
{% endif %}

{% if frontend.ssl_redirect | default(false) and frontend.port == 80 %}
    # SSL Redirect
    redirect scheme https code {{ haproxy_ssl_redirect.redirect_code | default(301) }} if !{ ssl_fc }
{% endif %}

{% if haproxy_hsts.enable | default(false) and frontend.ssl_certificate %}
    # HSTS Headers
    http-response set-header Strict-Transport-Security "max-age={{ haproxy_hsts.max_age | default(31536000) }}{% if haproxy_hsts.include_subdomains | default(true) %}; includeSubDomains{% endif %}{% if haproxy_hsts.preload | default(false) %}; preload{% endif %}"
{% endif %}

{% if haproxy_security.server_tokens | default(false) == false %}
    # Hide server information
    http-response del-header Server
    http-response del-header X-Powered-By
{% endif %}

{% if frontend.compression | default(false) %}
    # Compression
    compression algo {{ haproxy_compression.algorithms | join(' ') }}
    compression type {{ haproxy_compression.types | join(' ') }}
{% endif %}

{% if frontend.acls is defined and frontend.acls | length > 0 %}
    # Frontend-specific ACLs
{% for acl in frontend.acls %}
    acl {{ acl.name }} {{ acl.condition }}
{% endfor %}
{% endif %}

{% if haproxy_acls is defined and haproxy_acls | length > 0 %}
    # Global ACLs
{% for acl in haproxy_acls %}
    acl {{ acl.name }} {{ acl.condition }}
{% endfor %}
{% endif %}

{% if frontend.use_backends is defined and frontend.use_backends | length > 0 %}
    # Content Switching Rules
{% for rule in frontend.use_backends %}
    use_backend {{ rule.backend }} if {{ rule.condition }}
{% endfor %}
{% endif %}

{% if haproxy_use_backends is defined and haproxy_use_backends | length > 0 %}
    # Global Content Switching Rules  
{% for rule in haproxy_use_backends %}
    use_backend {{ rule.backend }} if {{ rule.condition }}
{% endfor %}
{% endif %}

    default_backend {{ frontend.default_backend | default(haproxy_backend_name) }}

{% endfor %}
{% else %}
# Legacy Frontend Configuration (Backward Compatibility)
frontend {{ haproxy_frontend_name }}
    bind {{ haproxy_frontend_bind_address }}:{{ haproxy_frontend_port }}{% if haproxy_ssl_certificate %} ssl crt {{ haproxy_ssl_certificate }}{% endif %}
    mode {{ haproxy_frontend_mode }}
    default_backend {{ haproxy_backend_name }}
{% endif %}

# Multiple Backends Configuration
{% if haproxy_backends is defined and haproxy_backends | length > 0 %}
{% for backend in haproxy_backends %}
backend {{ backend.name }}
    mode {{ backend.mode | default('http') }}
    balance {{ backend.balance_method | default('roundrobin') }}

{% if backend.compression | default(false) %}
    # Backend Compression
    compression algo {{ haproxy_compression.algorithms | join(' ') }}
    compression type {{ haproxy_compression.types | join(' ') }}
{% endif %}

{% if backend.cache_enable | default(false) and backend.cache_name %}
    # Cache Configuration
    http-request cache-use {{ backend.cache_name }}
    http-response cache-store {{ backend.cache_name }}
{% endif %}

{% if backend.httpchk %}
    option httpchk {{ backend.httpchk }}
{% endif %}

{% if haproxy_health_checks is defined and haproxy_health_checks | length > 0 %}
    # Custom Health Checks
{% for check in haproxy_health_checks %}
{% if check.type == 'tcp' %}
    option tcp-check
{% elif check.type == 'http' %}
    option httpchk GET {{ check.uri | default('/') }}
{% if check.expect is defined %}
    http-check expect {{ check.expect }}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{% if haproxy_external_monitoring.enable | default(false) %}
    # External Monitoring
{% if haproxy_external_monitoring.agent_check | default(false) %}
    default-server agent-check agent-port {{ haproxy_external_monitoring.agent_port | default(9999) }}
{% endif %}
{% endif %}

{% if haproxy_peers.enable | default(false) %}
    # Peer Synchronization
    stick-table type ip size 100k expire 30m store server_id peers haproxy_cluster
{% endif %}

{% for server in backend.servers | default([]) %}
    server {{ server.name }} {{ server.address }}{% if server.check | default(haproxy_server_defaults.check) %} check{% endif %}{% if server.weight is defined %} weight {{ server.weight }}{% else %}{% if haproxy_server_defaults.weight is defined %} weight {{ haproxy_server_defaults.weight }}{% endif %}{% endif %}{% if server.maxconn is defined %} maxconn {{ server.maxconn }}{% else %}{% if haproxy_server_defaults.maxconn is defined %} maxconn {{ haproxy_server_defaults.maxconn }}{% endif %}{% endif %}{% if server.backup | default(haproxy_server_defaults.backup) | default(false) %} backup{% endif %}{% if server.inter is defined %} inter {{ server.inter }}{% else %}{% if haproxy_server_defaults.inter is defined %} inter {{ haproxy_server_defaults.inter }}{% endif %}{% endif %}{% if server.downinter is defined %} downinter {{ server.downinter }}{% else %}{% if haproxy_server_defaults.downinter is defined %} downinter {{ haproxy_server_defaults.downinter }}{% endif %}{% endif %}{% if server.rise is defined %} rise {{ server.rise }}{% else %}{% if haproxy_server_defaults.rise is defined %} rise {{ haproxy_server_defaults.rise }}{% endif %}{% endif %}{% if server.fall is defined %} fall {{ server.fall }}{% else %}{% if haproxy_server_defaults.fall is defined %} fall {{ haproxy_server_defaults.fall }}{% endif %}{% endif %}{% if haproxy_external_monitoring.agent_check | default(false) %} agent-check agent-port {{ haproxy_external_monitoring.agent_port | default(9999) }}{% endif %}
{% endfor %}

{% endfor %}
{% else %}
# Legacy Backend Configuration (Backward Compatibility)
backend {{ haproxy_backend_name }}
    mode {{ haproxy_backend_mode }}
    balance {{ haproxy_backend_balance_method }}
{% if haproxy_backend_httpchk %}
    option httpchk {{ haproxy_backend_httpchk }}
{% endif %}
{% for srv in haproxy_backend_servers %}
    server {{ srv.name }} {{ srv.address }} check{% if srv.weight is defined %} weight {{ srv.weight }}{% endif %}{% if srv.backup | default(false) %} backup{% endif %}
{% endfor %}
{% endif %}
