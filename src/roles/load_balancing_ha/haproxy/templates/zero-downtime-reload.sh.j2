#!/bin/bash
# HAProxy Zero-Downtime Reload Script
# Generated by Ansible

set -e

HAPROXY_CONFIG="/etc/haproxy/haproxy.cfg"
HAPROXY_CONFIG_NEW="${HAPROXY_CONFIG}.new"
HAPROXY_PID_FILE="/run/haproxy.pid"
RELOAD_TIMEOUT="{{ haproxy_zero_downtime.reload_timeout | default('30s') }}"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Validate new configuration
log_message "Validating new HAProxy configuration..."
if ! haproxy -c -f "$HAPROXY_CONFIG_NEW"; then
    log_message "ERROR: New configuration is invalid!"
    exit 1
fi

# Backup current configuration
log_message "Backing up current configuration..."
cp "$HAPROXY_CONFIG" "${HAPROXY_CONFIG}.backup.$(date +%s)"

# Move new configuration into place
log_message "Deploying new configuration..."
mv "$HAPROXY_CONFIG_NEW" "$HAPROXY_CONFIG"

# Perform graceful reload
if [ -f "$HAPROXY_PID_FILE" ]; then
    OLD_PID=$(cat "$HAPROXY_PID_FILE")
    log_message "Performing graceful reload (old PID: $OLD_PID)..."
    
    # Start new HAProxy process
    haproxy -f "$HAPROXY_CONFIG" -D -p "$HAPROXY_PID_FILE" -sf "$OLD_PID"
    
    # Wait for new process to be ready
    sleep 2
    
    # Verify new process is running
    if [ -f "$HAPROXY_PID_FILE" ]; then
        NEW_PID=$(cat "$HAPROXY_PID_FILE")
        if [ "$NEW_PID" != "$OLD_PID" ]; then
            log_message "Successfully reloaded HAProxy (new PID: $NEW_PID)"
        else
            log_message "WARNING: PID didn't change, reload may have failed"
        fi
    else
        log_message "ERROR: PID file not found after reload"
        exit 1
    fi
else
    log_message "Starting HAProxy for the first time..."
    haproxy -f "$HAPROXY_CONFIG" -D -p "$HAPROXY_PID_FILE"
fi

log_message "Zero-downtime reload completed successfully"
