---
name: pfSense Role CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.9'
  ANSIBLE_VERSION: '>=4.0.0'

jobs:
  lint:
    name: Lint and Syntax Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible${{ env.ANSIBLE_VERSION }} ansible-lint yamllint molecule[docker]
          
      - name: Install Galaxy collections
        run: |
          ansible-galaxy collection install -r molecule/requirements.yml --force
          
      - name: Run YAML linting
        run: |
          yamllint .
          
      - name: Run Ansible linting
        run: |
          ansible-lint .
          
      - name: Check Ansible syntax
        run: |
          make syntax

  test-basic:
    name: Basic Configuration Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          make install-deps
          
      - name: Run basic configuration tests
        run: |
          make test-basic
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: basic-test-results
          path: .molecule/

  test-enterprise:
    name: Enterprise Configuration Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          make install-deps
          
      - name: Run enterprise configuration tests
        run: |
          make test-enterprise
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: enterprise-test-results
          path: .molecule/

  test-vpn:
    name: VPN Configuration Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          make install-deps
          
      - name: Run VPN configuration tests
        run: |
          make test-vpn
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: vpn-test-results
          path: .molecule/

  test-default:
    name: Default Configuration Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          make install-deps
          
      - name: Run default configuration tests
        run: |
          make test
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: default-test-results
          path: .molecule/

  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        scenario: [default, basic_config, enterprise, vpn_config]
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          make install-deps
          
      - name: Run test scenario ${{ matrix.scenario }}
        env:
          MOLECULE_SCENARIO: ${{ matrix.scenario }}
        run: |
          make test-scenario
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: matrix-test-results-${{ matrix.scenario }}-py${{ matrix.python-version }}
          path: .molecule/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check README
        run: |
          test -f README.md
          grep -q "pfSense" README.md
          
      - name: Check examples
        run: |
          test -f examples/site.yml
          test -f examples/inventory
          
      - name: Validate YAML files
        run: |
          find . -name "*.yml" -o -name "*.yaml" | xargs yamllint

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test-basic, test-enterprise, test-vpn, test-default]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --oneline --since="1 week ago" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release of pfSense Ansible Role
            
            Recent changes:
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test-basic, test-enterprise, test-vpn, test-default]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.test-basic.result == 'success' && needs.test-enterprise.result == 'success' && needs.test-vpn.result == 'success' && needs.test-default.result == 'success' }}
        run: |
          echo "✅ All tests passed successfully!"
          
      - name: Notify on failure
        if: ${{ needs.test-basic.result == 'failure' || needs.test-enterprise.result == 'failure' || needs.test-vpn.result == 'failure' || needs.test-default.result == 'failure' }}
        run: |
          echo "❌ Some tests failed!"
          exit 1
