#!/usr/bin/env python3
"""
APT Mirror Health Check Service
Generated by Ansible - Do not edit manually
"""

import os
import json
import time
import psutil
import subprocess
from datetime import datetime, timedelta
from flask import Flask, jsonify, request
import yaml

app = Flask(__name__)

# Load configuration
with open('/opt/apt-mirror-health/config.yml', 'r') as f:
    config = yaml.safe_load(f)

class HealthChecker:
    def __init__(self):
        self.mirror_path = "{{ apt_mirror_base_path }}"
        self.apache_service = "apache2"
        self.last_sync_file = os.path.join(self.mirror_path, "var", "last_sync")
        
    def check_disk_space(self):
        """Check available disk space"""
        try:
            usage = psutil.disk_usage(self.mirror_path)
            used_percent = (usage.used / usage.total) * 100
            free_gb = usage.free / (1024**3)
            
            return {
                "status": "healthy" if used_percent < 90 else "warning" if used_percent < 95 else "critical",
                "used_percent": round(used_percent, 2),
                "free_gb": round(free_gb, 2),
                "total_gb": round(usage.total / (1024**3), 2)
            }
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def check_apache_status(self):
        """Check Apache service status"""
        try:
            result = subprocess.run(['systemctl', 'is-active', self.apache_service], 
                                  capture_output=True, text=True)
            is_active = result.stdout.strip() == 'active'
            
            return {
                "status": "healthy" if is_active else "critical",
                "service_active": is_active
            }
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def check_last_sync(self):
        """Check when the last sync occurred"""
        try:
            if os.path.exists(self.last_sync_file):
                mtime = os.path.getmtime(self.last_sync_file)
                last_sync = datetime.fromtimestamp(mtime)
                hours_ago = (datetime.now() - last_sync).total_seconds() / 3600
                
                status = "healthy"
                if hours_ago > 48:  # More than 2 days
                    status = "critical"
                elif hours_ago > 25:  # More than 25 hours (daily sync + buffer)
                    status = "warning"
                
                return {
                    "status": status,
                    "last_sync": last_sync.isoformat(),
                    "hours_ago": round(hours_ago, 2)
                }
            else:
                return {
                    "status": "warning",
                    "message": "No sync file found - sync may not have run yet"
                }
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def check_mirror_completeness(self):
        """Check if mirror appears complete"""
        try:
            # Check for key directories and files
            required_paths = [
                os.path.join(self.mirror_path, "mirror"),
                os.path.join(self.mirror_path, "var"),
                os.path.join(self.mirror_path, "skel")
            ]
            
            missing_paths = [path for path in required_paths if not os.path.exists(path)]
            
            if missing_paths:
                return {
                    "status": "warning",
                    "missing_paths": missing_paths
                }
            
            # Count packages
            mirror_dir = os.path.join(self.mirror_path, "mirror")
            if os.path.exists(mirror_dir):
                package_count = 0
                for root, dirs, files in os.walk(mirror_dir):
                    package_count += len([f for f in files if f.endswith('.deb')])
                
                return {
                    "status": "healthy",
                    "package_count": package_count
                }
            else:
                return {
                    "status": "warning",
                    "message": "Mirror directory not found"
                }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def get_overall_health(self):
        """Get overall health status"""
        checks = {
            "disk_space": self.check_disk_space(),
            "apache_status": self.check_apache_status(),
            "last_sync": self.check_last_sync(),
            "mirror_completeness": self.check_mirror_completeness()
        }
        
        # Determine overall status
        statuses = [check["status"] for check in checks.values()]
        if "critical" in statuses:
            overall_status = "critical"
        elif "warning" in statuses:
            overall_status = "warning"
        elif "error" in statuses:
            overall_status = "error"
        else:
            overall_status = "healthy"
        
        return {
            "overall_status": overall_status,
            "timestamp": datetime.now().isoformat(),
            "checks": checks
        }

health_checker = HealthChecker()

@app.route('/health')
def health():
    """Main health endpoint"""
    return jsonify(health_checker.get_overall_health())

@app.route('/health/disk')
def health_disk():
    """Disk space specific health check"""
    return jsonify(health_checker.check_disk_space())

@app.route('/health/sync')
def health_sync():
    """Sync status specific health check"""
    return jsonify(health_checker.check_last_sync())

@app.route('/health/apache')
def health_apache():
    """Apache service specific health check"""
    return jsonify(health_checker.check_apache_status())

@app.route('/health/mirror')
def health_mirror():
    """Mirror completeness specific health check"""
    return jsonify(health_checker.check_mirror_completeness())

if __name__ == '__main__':
    app.run(host='0.0.0.0', port={{ apt_mirror_health_check_port }}, debug=False)
