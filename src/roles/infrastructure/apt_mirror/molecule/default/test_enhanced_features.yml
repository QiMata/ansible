---
# Test playbook for APT Mirror with new features
- name: Test APT Mirror Role with Enhanced Features
  hosts: localhost
  become: true
  vars:
    deployment_profile: "complex"
    apt_mirror_mirrors:
      - name: "ubuntu_main"
        base_url: "http://archive.ubuntu.com/ubuntu"
        distributions: ["jammy", "jammy-updates"]
        components: ["main", "restricted"]

    # GPG Key Management
    apt_mirror_gpg_keys:
      - name: "ubuntu-archive-keyring"
        keyserver: "keyserver.ubuntu.com"
        key_id: "871920D1991BC93C"

    # Health Checks
    apt_mirror_health_checks_enabled: true
    apt_mirror_health_check_port: 8080

    # Alerting
    apt_mirror_alerting_enabled: true
    apt_mirror_alert_email: "admin@example.com"
    apt_mirror_storage_alert_threshold: 80

    # Performance Monitoring
    apt_mirror_performance_monitoring_enabled: true
    apt_mirror_metrics_port: 9090

    # Bandwidth Throttling
    apt_mirror_bandwidth_throttling_enabled: true
    apt_mirror_bandwidth_limit: "5M"

    # Selective Mirroring
    apt_mirror_selective_mirroring_enabled: true
    apt_mirror_package_filters:
      - type: "exclude"
        pattern: ".*-dev$"

    # Mirror Prioritization
    apt_mirror_prioritization_enabled: true
    apt_mirror_upstream_mirrors:
      - url: "http://archive.ubuntu.com/ubuntu"
        priority: 1
        timeout: 30
      - url: "http://us.archive.ubuntu.com/ubuntu"
        priority: 2
        timeout: 30

    # Client Discovery
    apt_mirror_client_discovery_enabled: true
    apt_mirror_discovery_method: "dns"
    apt_mirror_discovery_domain: "mirror.local"

    # Client Metrics
    apt_mirror_client_metrics_enabled: true
    apt_mirror_analytics_enabled: true

  tasks:
    - name: Include apt_mirror role
      include_role:
        name: apt_mirror

    - name: Wait for services to start
      wait_for:
        port: "{{ item }}"
        timeout: 30
      loop:
        - "{{ apt_mirror_health_check_port }}"
        - "{{ apt_mirror_metrics_port }}"
      ignore_errors: true

    - name: Test health check endpoint
      uri:
        url: "http://localhost:{{ apt_mirror_health_check_port }}/health"
        method: GET
      register: health_check
      ignore_errors: true

    - name: Display health check result
      debug:
        var: health_check.json
      when: health_check.json is defined

    - name: Test metrics endpoint
      uri:
        url: "http://localhost:{{ apt_mirror_metrics_port }}/metrics"
        method: GET
      register: metrics_check
      ignore_errors: true

    - name: Verify configuration files exist
      stat:
        path: "{{ item }}"
      register: config_files
      loop:
        - "/etc/apt/mirror.list"
        - "/opt/apt-mirror-health/config.yml"
        - "/opt/apt-mirror-alerts/config.yml"
        - "/opt/apt-mirror-metrics/metrics_collector.py"
        - "/opt/apt-mirror-discovery/discovery_service.py"
        - "/opt/apt-mirror-analytics/metrics_collector.py"
      failed_when: not config_files.stat.exists

    - name: Verify services are running
      systemd:
        name: "{{ item }}"
        state: started
      register: service_status
      loop:
        - "apt-mirror-health"
        - "apt-mirror-metrics"
        - "apt-mirror-discovery"
        - "apt-mirror-analytics"
        - "apt-mirror-alerts"
      ignore_errors: true

    - name: Check GPG keys are imported
      command: gpg --homedir /var/spool/apt-mirror/.gnupg --list-keys
      become_user: apt-mirror
      register: gpg_keys
      ignore_errors: true

    - name: Display GPG keys
      debug:
        var: gpg_keys.stdout_lines
      when: gpg_keys.stdout_lines is defined
