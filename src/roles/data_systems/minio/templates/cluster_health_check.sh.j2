#!/bin/bash
# MinIO Cluster Health Check Script
# Generated by Ansible - do not edit manually

set -euo pipefail

LOGFILE="{{ minio_base_dir }}/logs/cluster_health.log"
ALERT_THRESHOLD=2  # Number of failed checks before alerting
FAILED_CHECKS_FILE="{{ minio_base_dir }}/.failed_checks"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOGFILE")"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOGFILE"
}

# Function to send alert (customize as needed)
send_alert() {
    local message="$1"
    log_message "ALERT: $message"
    # Add your alerting mechanism here (email, webhook, etc.)
    # Example: echo "$message" | mail -s "MinIO Cluster Alert" admin@example.com
}

# Function to check node health
check_node_health() {
    local node_url="$1"
    local status_code
    
    status_code=$(curl -s -o /dev/null -w "%{http_code}" \
        --max-time 10 \
        "{{ 'https' if minio_enable_tls else 'http' }}://${node_url}/minio/health/live" || echo "000")
    
    if [[ "$status_code" == "200" ]]; then
        return 0
    else
        return 1
    fi
}

# Main health check
main() {
    local failed_nodes=()
    local total_nodes={{ minio_cluster_nodes | length }}
    local healthy_nodes=0
    
    log_message "Starting cluster health check for $total_nodes nodes"
    
    # Check each node
{% for node in minio_cluster_nodes %}
    if check_node_health "{{ node }}"; then
        healthy_nodes=$((healthy_nodes + 1))
        log_message "Node {{ node }} is healthy"
    else
        failed_nodes+=("{{ node }}")
        log_message "Node {{ node }} is unhealthy"
    fi
{% endfor %}
    
    # Calculate cluster status
    local failed_count=${#failed_nodes[@]}
    local health_percentage=$(( (healthy_nodes * 100) / total_nodes ))
    
    log_message "Cluster health: $healthy_nodes/$total_nodes nodes healthy ($health_percentage%)"
    
    # Check if cluster is degraded
    if [[ $failed_count -gt 0 ]]; then
        # Read previous failed check count
        local prev_failed_count=0
        if [[ -f "$FAILED_CHECKS_FILE" ]]; then
            prev_failed_count=$(cat "$FAILED_CHECKS_FILE")
        fi
        
        # Increment failed check count
        local current_failed_count=$((prev_failed_count + 1))
        echo "$current_failed_count" > "$FAILED_CHECKS_FILE"
        
        # Send alert if threshold reached
        if [[ $current_failed_count -ge $ALERT_THRESHOLD ]]; then
            send_alert "MinIO cluster degraded: $failed_count/$total_nodes nodes failed (${failed_nodes[*]})"
        fi
        
        exit 1
    else
        # Reset failed check count on successful check
        rm -f "$FAILED_CHECKS_FILE"
        log_message "All nodes healthy"
        exit 0
    fi
}

main "$@"
