#!/bin/bash
# MinIO Backup Script
# Generated by Ansible - do not edit manually

set -euo pipefail

BACKUP_DIR="{{ minio_base_dir }}/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOGFILE="$BACKUP_DIR/backup_$TIMESTAMP.log"
MC_CONFIG_DIR="/home/{{ minio_user }}/.mc"

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOGFILE"
}

# Function to backup bucket data
backup_bucket_data() {
    local bucket="$1"
    local backup_path="$BACKUP_DIR/${bucket}_data_$TIMESTAMP"
    
    log_message "Starting backup of bucket: $bucket"
    
    # Create bucket backup directory
    mkdir -p "$backup_path"
    
    # Backup bucket contents
    if mc mirror --overwrite --remove local/"$bucket" "$backup_path"/; then
        log_message "Successfully backed up bucket data: $bucket"
        
        # Create compressed archive
        tar -czf "$backup_path.tar.gz" -C "$BACKUP_DIR" "$(basename "$backup_path")"
        rm -rf "$backup_path"
        log_message "Created compressed backup: $backup_path.tar.gz"
    else
        log_message "ERROR: Failed to backup bucket data: $bucket"
        return 1
    fi
}

# Function to backup bucket metadata
backup_bucket_metadata() {
    local bucket="$1"
    local metadata_file="$BACKUP_DIR/${bucket}_metadata_$TIMESTAMP.json"
    
    log_message "Backing up metadata for bucket: $bucket"
    
    # Get bucket info
    mc stat --json local/"$bucket" > "$metadata_file" 2>/dev/null || {
        log_message "WARNING: Could not backup metadata for bucket: $bucket"
        return 1
    }
    
    # Get bucket policy if it exists
    local policy_file="$BACKUP_DIR/${bucket}_policy_$TIMESTAMP.json"
    mc anonymous get local/"$bucket" > "$policy_file" 2>/dev/null || {
        echo '{"policy": "none"}' > "$policy_file"
    }
    
    log_message "Successfully backed up metadata for bucket: $bucket"
}

# Function to backup system configuration
backup_system_config() {
    local config_backup_dir="$BACKUP_DIR/system_config_$TIMESTAMP"
    
    log_message "Backing up system configuration"
    
    mkdir -p "$config_backup_dir"
    
    # Backup MinIO configuration
    cp -r "{{ minio_base_dir }}" "$config_backup_dir/minio_config" 2>/dev/null || true
    
    # Backup environment file
    cp /etc/default/minio "$config_backup_dir/minio.env" 2>/dev/null || true
    
    # Backup systemd service
    cp /etc/systemd/system/minio.service "$config_backup_dir/minio.service" 2>/dev/null || true
    
    # Create configuration archive
    tar -czf "$config_backup_dir.tar.gz" -C "$BACKUP_DIR" "$(basename "$config_backup_dir")"
    rm -rf "$config_backup_dir"
    
    log_message "Successfully backed up system configuration"
}

# Function to upload backup to external destination
upload_backup() {
    local backup_file="$1"
    
{% if minio_backup_destination != "" %}
    log_message "Uploading backup to: {{ minio_backup_destination }}"
    
    case "{{ minio_backup_destination }}" in
        s3://*)
            aws s3 cp "$backup_file" "{{ minio_backup_destination }}/" || {
                log_message "ERROR: Failed to upload $backup_file to S3"
                return 1
            }
            ;;
        /*)
            cp "$backup_file" "{{ minio_backup_destination }}/" || {
                log_message "ERROR: Failed to copy $backup_file to {{ minio_backup_destination }}"
                return 1
            }
            ;;
        *)
            log_message "WARNING: Unsupported backup destination: {{ minio_backup_destination }}"
            return 1
            ;;
    esac
    
    log_message "Successfully uploaded: $backup_file"
{% else %}
    log_message "No external backup destination configured"
{% endif %}
}

# Main backup function
main() {
    log_message "Starting MinIO backup process"
    
    # Set MC config directory
    export MC_CONFIG_DIR
    
    # Get list of buckets
    local buckets
    buckets=$(mc ls local/ --json | jq -r '.key' | sed 's|/$||' 2>/dev/null) || {
        log_message "ERROR: Could not list buckets"
        exit 1
    }
    
    local backup_files=()
    
    # Backup each bucket
    while IFS= read -r bucket; do
        if [[ -n "$bucket" ]]; then
            backup_bucket_data "$bucket" && backup_files+=("$BACKUP_DIR/${bucket}_data_$TIMESTAMP.tar.gz")
            backup_bucket_metadata "$bucket"
        fi
    done <<< "$buckets"
    
    # Backup system configuration
    backup_system_config
    backup_files+=("$BACKUP_DIR/system_config_$TIMESTAMP.tar.gz")
    
    # Upload backups to external destination
    for backup_file in "${backup_files[@]}"; do
        if [[ -f "$backup_file" ]]; then
            upload_backup "$backup_file"
        fi
    done
    
    log_message "Backup process completed successfully"
    log_message "Backup files created: ${#backup_files[@]}"
    
    # Create backup manifest
    {
        echo "# MinIO Backup Manifest - $TIMESTAMP"
        echo "# Backup created on: $(date)"
        echo "# Backup files:"
        printf '%s\n' "${backup_files[@]}"
    } > "$BACKUP_DIR/manifest_$TIMESTAMP.txt"
    
    exit 0
}

# Check if mc is available
if ! command -v mc &> /dev/null; then
    log_message "ERROR: MinIO client (mc) not found"
    exit 1
fi

main "$@"
