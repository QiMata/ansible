#!/bin/bash
# MinIO Health Check Script
# Generated by Ansible - do not edit manually

set -euo pipefail

LOGFILE="{{ minio_base_dir }}/logs/health_check.log"
MINIO_URL="{{ 'https' if minio_enable_tls else 'http' }}://{{ minio_bind_address if minio_bind_address != '0.0.0.0' else 'localhost' }}:{{ minio_server_port }}"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOGFILE")"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOGFILE"
}

# Function to check readiness
check_readiness() {
    local status_code
    status_code=$(curl -s -o /dev/null -w "%{http_code}" \
        --max-time 10 \
        "$MINIO_URL/minio/health/ready" || echo "000")
    
    if [[ "$status_code" == "200" ]]; then
        log_message "Readiness check: PASS"
        return 0
    else
        log_message "Readiness check: FAIL (HTTP $status_code)"
        return 1
    fi
}

# Function to check liveness
check_liveness() {
    local status_code
    status_code=$(curl -s -o /dev/null -w "%{http_code}" \
        --max-time 10 \
        "$MINIO_URL/minio/health/live" || echo "000")
    
    if [[ "$status_code" == "200" ]]; then
        log_message "Liveness check: PASS"
        return 0
    else
        log_message "Liveness check: FAIL (HTTP $status_code)"
        return 1
    fi
}

# Function to check disk usage
check_disk_usage() {
    local usage_percent
    usage_percent=$(df "{{ minio_data_dir }}" | awk 'NR==2 {print substr($5, 1, length($5)-1)}')
    
    if [[ $usage_percent -lt {{ minio_disk_usage_threshold }} ]]; then
        log_message "Disk usage check: PASS ($usage_percent%)"
        return 0
    else
        log_message "Disk usage check: WARN ($usage_percent% >= {{ minio_disk_usage_threshold }}%)"
        return 1
    fi
}

# Main health check
main() {
    log_message "Starting health check"
    
    local checks_passed=0
    local total_checks=3
    
    # Run checks
    check_readiness && checks_passed=$((checks_passed + 1))
    check_liveness && checks_passed=$((checks_passed + 1))
    check_disk_usage && checks_passed=$((checks_passed + 1))
    
    # Report results
    if [[ $checks_passed -eq $total_checks ]]; then
        log_message "Health check completed: ALL CHECKS PASSED ($checks_passed/$total_checks)"
        exit 0
    else
        log_message "Health check completed: SOME CHECKS FAILED ($checks_passed/$total_checks)"
        exit 1
    fi
}

main "$@"
