#!/bin/bash
# PostgreSQL Health Check Script

POSTGRESQL_VERSION="{{ postgresql_version }}"
POSTGRESQL_PORT="{{ postgresql_port | default(5432) }}"
HEALTH_CHECK_TIMEOUT="{{ postgresql_health_check_timeout }}"
MAX_CONNECTIONS_THRESHOLD="{{ postgresql_max_connections_alert_threshold }}"
DISK_THRESHOLD="{{ postgresql_disk_alert_threshold }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a /var/log/postgresql_health_check.log
}

# Function to check PostgreSQL service status
check_service_status() {
    if systemctl is-active --quiet postgresql; then
        log_message "${GREEN}✓ PostgreSQL service is running${NC}"
        return 0
    else
        log_message "${RED}✗ PostgreSQL service is not running${NC}"
        return 1
    fi
}

# Function to check database connectivity
check_database_connectivity() {
    if timeout $HEALTH_CHECK_TIMEOUT sudo -u postgres psql -c "SELECT 1;" > /dev/null 2>&1; then
        log_message "${GREEN}✓ Database connection successful${NC}"
        return 0
    else
        log_message "${RED}✗ Database connection failed${NC}"
        return 1
    fi
}

# Function to check connection count
check_connection_count() {
    local current_connections
    local max_connections
    local connection_percentage
    
    current_connections=$(sudo -u postgres psql -t -c "SELECT count(*) FROM pg_stat_activity;" 2>/dev/null | xargs)
    max_connections=$(sudo -u postgres psql -t -c "SHOW max_connections;" 2>/dev/null | xargs)
    
    if [[ -n "$current_connections" && -n "$max_connections" ]]; then
        connection_percentage=$((current_connections * 100 / max_connections))
        
        if [[ $connection_percentage -gt $MAX_CONNECTIONS_THRESHOLD ]]; then
            log_message "${YELLOW}⚠ High connection usage: ${connection_percentage}% (${current_connections}/${max_connections})${NC}"
            return 1
        else
            log_message "${GREEN}✓ Connection usage normal: ${connection_percentage}% (${current_connections}/${max_connections})${NC}"
            return 0
        fi
    else
        log_message "${RED}✗ Failed to check connection count${NC}"
        return 1
    fi
}

# Function to check disk space
check_disk_space() {
    local data_dir="/var/lib/postgresql/$POSTGRESQL_VERSION/main"
    local disk_usage
    
    if [[ -d "$data_dir" ]]; then
        disk_usage=$(df "$data_dir" | awk 'NR==2 {print $5}' | sed 's/%//')
        
        if [[ $disk_usage -gt $DISK_THRESHOLD ]]; then
            log_message "${YELLOW}⚠ High disk usage: ${disk_usage}% on PostgreSQL data directory${NC}"
            return 1
        else
            log_message "${GREEN}✓ Disk usage normal: ${disk_usage}% on PostgreSQL data directory${NC}"
            return 0
        fi
    else
        log_message "${RED}✗ PostgreSQL data directory not found: $data_dir${NC}"
        return 1
    fi
}

# Function to check replication (if enabled)
check_replication() {
{% if postgresql_enable_replication | default(false) %}
    local replication_status
    replication_status=$(sudo -u postgres psql -t -c "SELECT count(*) FROM pg_stat_replication;" 2>/dev/null | xargs)
    
    if [[ -n "$replication_status" ]]; then
        if [[ "$replication_status" -gt 0 ]]; then
            log_message "${GREEN}✓ Replication active: $replication_status replica(s) connected${NC}"
        else
            log_message "${YELLOW}⚠ No replicas connected${NC}"
        fi
        return 0
    else
        log_message "${RED}✗ Failed to check replication status${NC}"
        return 1
    fi
{% else %}
    log_message "ℹ Replication monitoring disabled"
    return 0
{% endif %}
}

# Main health check function
main() {
    log_message "Starting PostgreSQL health check"
    
    local exit_code=0
    
    check_service_status || exit_code=1
    check_database_connectivity || exit_code=1
    check_connection_count || exit_code=1
    check_disk_space || exit_code=1
    check_replication || exit_code=1
    
    if [[ $exit_code -eq 0 ]]; then
        log_message "${GREEN}✓ All health checks passed${NC}"
    else
        log_message "${RED}✗ Some health checks failed${NC}"
    fi
    
    log_message "Health check completed"
    exit $exit_code
}

# Run the main function
main "$@"
