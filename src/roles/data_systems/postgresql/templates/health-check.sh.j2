#!/bin/bash
# PostgreSQL Health Check Script
# Generated by Ansible on {{ ansible_date_time.date }}

# Configuration
PG_VERSION="{{ postgresql_version }}"
PG_PORT="{{ postgresql_port }}"
PG_USER="postgres"
LOG_FILE="/var/log/postgresql-health.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# Function to log messages
log_message() {
    echo "[$DATE] $1" | tee -a "$LOG_FILE"
}

# Function to check service status
check_service() {
    log_message "Checking PostgreSQL service status..."
    if systemctl is-active --quiet postgresql@${PG_VERSION}-main; then
        log_message "✓ PostgreSQL service is running"
        return 0
    else
        log_message "✗ PostgreSQL service is not running"
        return 1
    fi
}

# Function to check port connectivity
check_port() {
    log_message "Checking PostgreSQL port connectivity..."
    if nc -z localhost "$PG_PORT" 2>/dev/null; then
        log_message "✓ PostgreSQL port $PG_PORT is accessible"
        return 0
    else
        log_message "✗ PostgreSQL port $PG_PORT is not accessible"
        return 1
    fi
}

# Function to check database connectivity
check_database() {
    log_message "Checking database connectivity..."
    if sudo -u "$PG_USER" psql -c "SELECT version();" >/dev/null 2>&1; then
        log_message "✓ Database connection successful"
        return 0
    else
        log_message "✗ Database connection failed"
        return 1
    fi
}

# Function to check connection count
check_connections() {
    log_message "Checking active connections..."
    local connections
    connections=$(sudo -u "$PG_USER" psql -t -c "SELECT count(*) FROM pg_stat_activity;" 2>/dev/null | xargs)
    if [[ -n "$connections" && "$connections" =~ ^[0-9]+$ ]]; then
        log_message "✓ Active connections: $connections"
        if [[ "$connections" -gt $(({{ postgresql_max_connections }} * 80 / 100)) ]]; then
            log_message "⚠ High connection usage: $connections/{{ postgresql_max_connections }}"
        fi
        return 0
    else
        log_message "✗ Failed to retrieve connection count"
        return 1
    fi
}

# Function to check disk space
check_disk_space() {
    log_message "Checking disk space..."
    local usage
    usage=$(df {{ postgresql_data_dir }} | tail -1 | awk '{print $5}' | sed 's/%//')
    if [[ -n "$usage" && "$usage" =~ ^[0-9]+$ ]]; then
        log_message "✓ Disk usage: ${usage}%"
        if [[ "$usage" -gt 85 ]]; then
            log_message "⚠ High disk usage: ${usage}%"
        fi
        return 0
    else
        log_message "✗ Failed to check disk space"
        return 1
    fi
}

# Function to check for blocking queries
check_blocking_queries() {
    log_message "Checking for blocking queries..."
    local blocking_count
    blocking_count=$(sudo -u "$PG_USER" psql -t -c "
        SELECT count(*)
        FROM pg_catalog.pg_locks blocked_locks
        JOIN pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
        JOIN pg_catalog.pg_locks blocking_locks 
          ON blocking_locks.locktype = blocked_locks.locktype
          AND blocking_locks.pid != blocked_locks.pid
        WHERE NOT blocked_locks.granted;
    " 2>/dev/null | xargs)
    
    if [[ -n "$blocking_count" && "$blocking_count" =~ ^[0-9]+$ ]]; then
        if [[ "$blocking_count" -eq 0 ]]; then
            log_message "✓ No blocking queries detected"
        else
            log_message "⚠ Blocking queries detected: $blocking_count"
        fi
        return 0
    else
        log_message "✗ Failed to check blocking queries"
        return 1
    fi
}

# Function to check recent errors
check_errors() {
    log_message "Checking for recent errors..."
    local error_count
    error_count=$(find /var/log/postgresql -name "*.log" -mtime -1 -exec grep -c "ERROR\|FATAL\|PANIC" {} + 2>/dev/null | awk '{sum += $1} END {print sum+0}')
    
    if [[ "$error_count" -eq 0 ]]; then
        log_message "✓ No recent errors found"
    else
        log_message "⚠ Recent errors found: $error_count"
    fi
}

# Main health check function
main() {
    log_message "=========================================="
    log_message "PostgreSQL Health Check Started"
    log_message "=========================================="
    
    local checks_passed=0
    local total_checks=6
    
    check_service && ((checks_passed++))
    check_port && ((checks_passed++))
    check_database && ((checks_passed++))
    check_connections && ((checks_passed++))
    check_disk_space && ((checks_passed++))
    check_blocking_queries && ((checks_passed++))
    check_errors
    
    log_message "=========================================="
    log_message "Health Check Summary: $checks_passed/$total_checks checks passed"
    
    if [[ "$checks_passed" -eq "$total_checks" ]]; then
        log_message "✓ PostgreSQL health check: PASSED"
        exit 0
    else
        log_message "✗ PostgreSQL health check: FAILED"
        exit 1
    fi
}

# Run the health check
main "$@"
