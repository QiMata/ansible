---
- name: Install PostgreSQL security extensions
  ansible.builtin.package:
    name: "postgresql-{{ postgresql_version }}-{{ item }}"
    state: present
  loop: "{{ postgresql_security_extensions }}"
  when: item in ['pgaudit', 'passwordcheck']

- name: Configure shared_preload_libraries for security extensions
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: "^#?shared_preload_libraries = "
    line: "shared_preload_libraries = '{{ postgresql_security_extensions | join(',') }}'"
    backup: true
  notify: restart postgresql
  when: postgresql_security_extensions | length > 0

- name: Create pgaudit extension
  community.postgresql.postgresql_ext:
    name: pgaudit
    db: postgres
    state: present
  become_user: postgres
  when: "'pgaudit' in postgresql_security_extensions"

- name: Configure pgaudit settings
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: true
  loop:
    - { regexp: "^#?pgaudit.log = ", line: "pgaudit.log = 'all'" }
    - { regexp: "^#?pgaudit.log_catalog = ", line: "pgaudit.log_catalog = on" }
    - { regexp: "^#?pgaudit.log_parameter = ", line: "pgaudit.log_parameter = {{ postgresql_audit_log_parameter | ternary('on', 'off') }}" }
    - { regexp: "^#?pgaudit.log_statement_once = ", line: "pgaudit.log_statement_once = {{ postgresql_audit_log_statement_once | ternary('on', 'off') }}" }
  notify: restart postgresql
  when: "'pgaudit' in postgresql_security_extensions"
