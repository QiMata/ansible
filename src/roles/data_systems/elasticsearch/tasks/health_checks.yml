---
# ============================================================================
# HEALTH CHECKS AND VALIDATION TASKS
# ============================================================================

- name: Wait for Elasticsearch service to start
  ansible.builtin.service:
    name: elasticsearch
    state: started
  register: es_service_status

- name: Wait for Elasticsearch to be responsive
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}
    method: GET
    status_code: [200, 401]
  register: es_health_check
  until: es_health_check.status in [200, 401]
  retries: "{{ es_health_check_retries }}"
  delay: "{{ es_health_check_delay }}"

- name: Check Elasticsearch cluster health
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}/_cluster/health
    method: GET
    timeout: "{{ es_cluster_health_timeout | regex_replace('s', '') | int }}"
    return_content: true
  register: cluster_health
  when: es_validate_cluster_health

- name: Display cluster health status
  ansible.builtin.debug:
    msg: |
      Cluster Health Status:
      - Cluster Name: {{ cluster_health.json.cluster_name | default('N/A') }}
      - Status: {{ cluster_health.json.status | default('N/A') }}
      - Number of Nodes: {{ cluster_health.json.number_of_nodes | default('N/A') }}
      - Number of Data Nodes: {{ cluster_health.json.number_of_data_nodes | default('N/A') }}
      - Active Primary Shards: {{ cluster_health.json.active_primary_shards | default('N/A') }}
      - Active Shards: {{ cluster_health.json.active_shards | default('N/A') }}
      - Relocating Shards: {{ cluster_health.json.relocating_shards | default('N/A') }}
      - Initializing Shards: {{ cluster_health.json.initializing_shards | default('N/A') }}
      - Unassigned Shards: {{ cluster_health.json.unassigned_shards | default('N/A') }}
  when:
    - cluster_health is defined
    - cluster_health.json is defined

- name: Verify cluster is in expected state
  ansible.builtin.assert:
    that:
      - cluster_health.json.status != "red"
    fail_msg: "Cluster health is RED - there are critical issues"
    success_msg: "Cluster health is {{ cluster_health.json.status | upper }}"
  when:
    - cluster_health is defined
    - cluster_health.json is defined
    - es_validate_cluster_health

- name: Check node information
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}/_nodes/_local
    method: GET
    return_content: true
  register: node_info

- name: Display node information
  ansible.builtin.debug:
    msg: |
      Node Information:
      - Node Name: {{ node_info.json.nodes[node_info.json.nodes.keys()[0]].name | default('N/A') }}
      - Node Roles: {{ node_info.json.nodes[node_info.json.nodes.keys()[0]].roles | default([]) | join(', ') }}
      - ES Version: {{ node_info.json.nodes[node_info.json.nodes.keys()[0]].version | default('N/A') }}
      - JVM Version: {{ node_info.json.nodes[node_info.json.nodes.keys()[0]].jvm.version | default('N/A') }}
  when:
    - node_info is defined
    - node_info.json is defined

- name: Check indices health
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}/_cat/indices?v&h=index,health,status,pri,rep,docs.count,store.size
    method: GET
    return_content: true
  register: indices_health

- name: Display indices information
  ansible.builtin.debug:
    msg: "{{ indices_health }}"
  when: indices_health is defined

- name: Check for red indices
  ansible.builtin.fail:
    msg: "Found indices in RED status: {{ indices_health.content }}"
  when:
    - indices_health is defined
    - indices_health.status == 200
    - indices_health.content is defined
    - indices_health.content != ""
    - "'red' in indices_health.content"
    - es_validate_cluster_health

- name: Check disk usage on data nodes
  ansible.builtin.uri:
    url: >-
      {{ 'http://' ~ es_network_host ~ ':' ~ (es_proxy_settings.http_port | default(9200)) ~
         '/_cat/allocation?v&h=' ~
         'node,disk.indices,disk.used,disk.avail,disk.total,disk.percent' }}
    method: GET
    return_content: true
  register: disk_allocation

- name: Display disk allocation
  ansible.builtin.debug:
    msg: "{{ disk_allocation.content }}"
  when: disk_allocation is defined

- name: Warning for high disk usage
  ansible.builtin.debug:
    msg: "WARNING: High disk usage detected on some nodes"
  when:
    - disk_allocation is defined
    - disk_allocation.content is search('[89][0-9]%|100%')

- name: Check pending tasks
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}/_cat/pending_tasks?v
    method: GET
    return_content: true
  register: pending_tasks

- name: Display pending tasks
  ansible.builtin.debug:
    msg: "Pending tasks: {{ pending_tasks.content if pending_tasks.content | length > 0 else 'None' }}"
  when: pending_tasks is defined

- name: Check thread pool status
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}/_cat/thread_pool?v&h=node_name,name,active,queue,rejected,completed
    method: GET
    return_content: true
  register: thread_pools

- name: Display thread pool status
  ansible.builtin.debug:
    msg: "{{ thread_pools.content }}"
  when: thread_pools is defined

- name: Create health check script
  ansible.builtin.template:
    src: health-check.sh.j2
    dest: /usr/local/bin/elasticsearch-health-check.sh
    owner: root
    group: root
    mode: '0755'

- name: Create health monitoring cron job
  ansible.builtin.cron:
    name: "Elasticsearch health check"
    minute: "*/5"
    job: "/usr/local/bin/elasticsearch-health-check.sh"
    user: root
  when: es_health_check_enabled

- name: Check JVM heap usage
  ansible.builtin.uri:
    url: >-
      http://{{ es_network_host }}:{{ es_proxy_settings.http_port | default(9200) }}/_nodes/stats/jvm
    method: GET
    return_content: true
  register: jvm_stats

- name: Display JVM heap usage
  ansible.builtin.debug:
    msg: |
      JVM Heap Usage:
      {% for node_id, node_data in jvm_stats.json.nodes.items() %}
      - {{ node_data.name }}: {{ (node_data.jvm.mem.heap_used_percent) }}% used
      {% endfor %}
  when:
    - jvm_stats is defined
    - jvm_stats.json is defined

- name: Warning for high JVM heap usage
  ansible.builtin.debug:
    msg: "WARNING: High JVM heap usage detected (>85%)"
  when:
    - jvm_stats is defined
    - jvm_stats.json is defined
    - jvm_stats.json.nodes.values() | map(attribute='jvm.mem.heap_used_percent') | max > 85

- name: Final health summary
  ansible.builtin.debug:
    msg: |
      Elasticsearch Health Summary:
      ================================
      ✓ Service Status: {{ 'Running' if es_service_status.status.ActiveState == 'active' else 'Not Running' }}
      ✓ HTTP Response: {{ 'OK' if es_health_check.status in [200, 401] else 'Failed' }}
      ✓ Cluster Health: {{ cluster_health.json.status | default('Unknown') | upper }}
      ✓ Node Count: {{ cluster_health.json.number_of_nodes | default('Unknown') }}
      ✓ Data Nodes: {{ cluster_health.json.number_of_data_nodes | default('Unknown') }}
      ✓ Health Check: COMPLETED
