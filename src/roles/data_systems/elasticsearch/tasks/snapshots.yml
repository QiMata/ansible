---
# ============================================================================
# SNAPSHOT AND BACKUP CONFIGURATION TASKS
# ============================================================================

- name: Create snapshot repository directories
  ansible.builtin.file:
    path: "{{ item.settings.location }}"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: '0750'
    recurse: true
  loop: "{{ elasticsearch_snapshot_repositories }}"
  when:
    - item.type == "fs"
    - item.settings.location is defined

- name: Create snapshot repositories
  ansible.builtin.uri:
    url: >-
      http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_snapshot/{{ item.name }}
    method: PUT
    body_format: json
    body:
      type: "{{ item.type }}"
      settings: "{{ item.settings }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 201]
  loop: "{{ elasticsearch_snapshot_repositories }}"
  when:
    - elasticsearch_wait_for_cluster
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Verify snapshot repositories
  ansible.builtin.uri:
    url: >-
      http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_snapshot/{{ item.name }}/_verify
    method: POST
    headers:
      Content-Type: "application/json"
    status_code: [200, 400]
  loop: "{{ elasticsearch_snapshot_repositories }}"
  register: repo_verification
  when:
    - elasticsearch_wait_for_cluster
  failed_when: >-
    (repo_verification.results | default([])
     | map(attribute='status')
     | select('defined')
     | reject('in', [200, 400])
     | list | length) > 0
  changed_when: false
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Display repository verification results
  ansible.builtin.debug:
    msg: "Repository {{ item.item.name }} verification: {{ 'PASSED' if item.status == 200 else 'FAILED' }}"
  loop: "{{ repo_verification.results | default([]) }}"
  when: repo_verification is defined

- name: Create snapshot lifecycle policies
  ansible.builtin.uri:
    url: >-
      http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_slm/policy/{{ item.name }}
    method: PUT
    body_format: json
    body:
      schedule: "{{ item.schedule }}"
      name: "{{ item.snapshot_name | default('<' + item.name + '-{now/d}>') }}"
      repository: "{{ item.repository }}"
      config: "{{ item.config | default({}) }}"
      retention: "{{ item.retention | default({}) }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 201]
  loop: "{{ elasticsearch_snapshot_policies }}"
  when:
    - elasticsearch_wait_for_cluster
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Create backup retention cleanup script
  ansible.builtin.template:
    src: cleanup-snapshots.sh.j2
    dest: /usr/local/bin/cleanup-elasticsearch-snapshots.sh
    owner: root
    group: root
    mode: '0755'
  when: elasticsearch_backup_retention_days > 0

- name: Create cron job for snapshot cleanup
  ansible.builtin.cron:
    name: "Elasticsearch snapshot cleanup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/cleanup-elasticsearch-snapshots.sh"
    user: root
  when: elasticsearch_backup_retention_days > 0

- name: Create manual snapshot script
  ansible.builtin.template:
    src: manual-snapshot.sh.j2
    dest: /usr/local/bin/elasticsearch-manual-snapshot.sh
    owner: root
    group: root
    mode: '0755'

- name: Test snapshot creation
  ansible.builtin.uri:
    url: >-
      {{ 'http://' ~ elasticsearch_network_host ~ ':' ~ (elasticsearch_proxy_settings.http_port | default(9200)) ~
         '/_snapshot/' ~ elasticsearch_snapshot_repositories[0].name ~
         '/test-snapshot-' ~ ansible_date_time.epoch }}
    method: PUT
    body_format: json
    body:
      indices: ".kibana*"
      ignore_unavailable: true
      include_global_state: false
      metadata:
        taken_by: "ansible"
        purpose: "test"
    headers:
      Content-Type: "application/json"
    status_code: [200, 201, 400]
  when:
    - elasticsearch_snapshot_repositories | length > 0
    - elasticsearch_wait_for_cluster
  register: test_snapshot
  failed_when: test_snapshot.status not in [200, 201, 400]
  changed_when: test_snapshot.status in [200, 201]
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Check test snapshot status
  ansible.builtin.uri:
    url: >-
      {{ 'http://' ~ elasticsearch_network_host ~ ':' ~ (elasticsearch_proxy_settings.http_port | default(9200)) ~
         '/_snapshot/' ~ elasticsearch_snapshot_repositories[0].name ~
         '/test-snapshot-' ~ ansible_date_time.epoch }}
    method: GET
    headers:
      Content-Type: "application/json"
    status_code: [200, 404]
  when:
    - test_snapshot is defined
    - test_snapshot.status in [200, 201]
    - elasticsearch_wait_for_cluster
  register: snapshot_status
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Delete test snapshot
  ansible.builtin.uri:
    url: >-
      {{ 'http://' ~ elasticsearch_network_host ~ ':' ~ (elasticsearch_proxy_settings.http_port | default(9200)) ~
         '/_snapshot/' ~ elasticsearch_snapshot_repositories[0].name ~
         '/test-snapshot-' ~ ansible_date_time.epoch }}
    method: DELETE
    headers:
      Content-Type: "application/json"
    status_code: [200, 404]
  when:
    - test_snapshot is defined
    - test_snapshot.status in [200, 201]
    - elasticsearch_wait_for_cluster
  register: delete_test_snapshot_result
  failed_when: delete_test_snapshot_result.status not in [200, 404]
  changed_when: delete_test_snapshot_result.status == 200
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Create snapshot monitoring script
  ansible.builtin.template:
    src: monitor-snapshots.sh.j2
    dest: /usr/local/bin/monitor-elasticsearch-snapshots.sh
    owner: root
    group: root
    mode: '0755'

- name: Setup snapshot monitoring cron
  ansible.builtin.cron:
    name: "Elasticsearch snapshot monitoring"
    minute: "*/30"
    job: "/usr/local/bin/monitor-elasticsearch-snapshots.sh"
    user: root
  when: elasticsearch_snapshot_repositories | length > 0
