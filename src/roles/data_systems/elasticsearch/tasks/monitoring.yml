---
# ============================================================================
# MONITORING AND ALERTING TASKS
# ============================================================================

- name: Configure monitoring settings
  ansible.builtin.template:
    src: monitoring.yml.j2
    dest: /etc/elasticsearch/monitoring.yml
    owner: root
    group: elasticsearch
    mode: '0640'
  when: elasticsearch_enable_monitoring
  notify: restart elasticsearch

- name: Enable monitoring collection
  ansible.builtin.uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_cluster/settings"
    method: PUT
    body_format: json
    body:
      persistent:
        xpack:
          monitoring:
            collection:
              enabled: "{{ elasticsearch_monitoring_collection_enabled | lower }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 400]
  when:
    - elasticsearch_enable_monitoring
    - elasticsearch_wait_for_cluster
  register: elasticsearch_monitoring_collection_result
  failed_when: elasticsearch_monitoring_collection_result.status not in [200, 400]
  changed_when: elasticsearch_monitoring_collection_result.status == 200
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Configure monitoring exporters
  ansible.builtin.uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_cluster/settings"
    method: PUT
    body_format: json
    body:
      persistent:
        xpack:
          monitoring:
            exporters: "{{ elasticsearch_monitoring_exporters }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 400]
  when:
    - elasticsearch_enable_monitoring
    - elasticsearch_monitoring_exporters | length > 0
    - elasticsearch_wait_for_cluster
  register: elasticsearch_monitoring_exporters_result
  failed_when: elasticsearch_monitoring_exporters_result.status not in [200, 400]
  changed_when: elasticsearch_monitoring_exporters_result.status == 200
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Enable Watcher
  ansible.builtin.uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_cluster/settings"
    method: PUT
    body_format: json
    body:
      persistent:
        xpack:
          watcher:
            enabled: "{{ elasticsearch_watcher_enabled | lower }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 400]
  when:
    - elasticsearch_watcher_enabled
    - elasticsearch_wait_for_cluster
  register: elasticsearch_watcher_enable_result
  failed_when: elasticsearch_watcher_enable_result.status not in [200, 400]
  changed_when: elasticsearch_watcher_enable_result.status == 200
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Configure Watcher encryption
  ansible.builtin.uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_cluster/settings"
    method: PUT
    body_format: json
    body:
      persistent:
        xpack:
          watcher:
            encrypt_sensitive_data: "{{ elasticsearch_watcher_encrypt_sensitive_data | lower }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 400]
  when:
    - elasticsearch_watcher_enabled
    - elasticsearch_wait_for_cluster
  register: elasticsearch_watcher_encrypt_result
  failed_when: elasticsearch_watcher_encrypt_result.status not in [200, 400]
  changed_when: elasticsearch_watcher_encrypt_result.status == 200
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Create monitoring dashboard watches
  ansible.builtin.uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_watcher/watch/{{ item.name }}"
    method: PUT
    body_format: json
    body: "{{ item.watch }}"
    headers:
      Content-Type: "application/json"
    status_code: [200, 201, 400]
  loop: "{{ elasticsearch_monitoring_watches | default([]) }}"
  when:
    - elasticsearch_watcher_enabled
    - elasticsearch_wait_for_cluster
  register: elasticsearch_monitoring_watch_results
  failed_when: >-
    (elasticsearch_monitoring_watch_results.results | default([])
     | map(attribute='status')
     | select('defined')
     | reject('in', [200, 201, 400])
     | list | length) > 0
  changed_when: >-
    (elasticsearch_monitoring_watch_results.results | default([])
     | map(attribute='status')
     | select('defined')
     | select('in', [200, 201])
     | list | length) > 0
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Configure cluster health monitoring
  ansible.builtin.template:
    src: health-watch.json.j2
    dest: /tmp/health-watch.json
    owner: root
    group: root
    mode: '0644'
  when: elasticsearch_watcher_enabled

- name: Install cluster health watch
  ansible.builtin.uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_proxy_settings.http_port | default(9200) }}/_watcher/watch/cluster_health"
    method: PUT
    body: "{{ lookup('file', '/tmp/health-watch.json') | from_json }}"
    body_format: json
    headers:
      Content-Type: "application/json"
    status_code: [200, 201, 400]
  when:
    - elasticsearch_watcher_enabled
    - elasticsearch_wait_for_cluster
  register: elasticsearch_cluster_health_watch_result
  failed_when: elasticsearch_cluster_health_watch_result.status not in [200, 201, 400]
  changed_when: elasticsearch_cluster_health_watch_result.status in [200, 201]
  delegate_to: "{{ groups['es_cluster'][0] | default(inventory_hostname) }}"
  run_once: true

- name: Configure slow log monitoring
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/log4j2.properties
    regexp: '^logger\.slowlog\.'
    line: |
      logger.slowlog.name = index.search.slowlog
      logger.slowlog.level = warn
      logger.slowlog.appenderRef.slowlog_rolling.ref = slowlog_rolling
    create: true
    owner: root
    group: root
    mode: '0644'
  notify: restart elasticsearch

- name: Setup log rotation for monitoring logs
  ansible.builtin.template:
    src: elasticsearch-monitoring-logrotate.j2
    dest: /etc/logrotate.d/elasticsearch-monitoring
    owner: root
    group: root
    mode: '0644'
  when: elasticsearch_enable_monitoring
