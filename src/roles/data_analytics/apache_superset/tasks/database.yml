---
# Database Management Tasks

- name: Install database clients for connection validation
  ansible.builtin.apt:
    name:
      - postgresql-client
      - mysql-client
    state: present
  when: apache_superset_db_validate_connection or apache_superset_db_auto_create
  tags: ['superset', 'apache_superset_database']

- name: Parse database URI
  ansible.builtin.set_fact:
    db_uri_parsed: "{{ apache_superset_database_uri | regex_search('([^:]+)://(?:([^:]+)(?::([^@]+))?@)?([^:/]+)(?::([0-9]+))?/(.+)') }}"
  when: apache_superset_db_validate_connection or apache_superset_db_auto_create
  tags: ['superset', 'apache_superset_database']

- name: Extract database connection details
  ansible.builtin.set_fact:
    db_type: "{{ apache_superset_database_uri.split('://')[0] }}"
    db_connection_string: "{{ apache_superset_database_uri.split('://')[1] }}"
  when: apache_superset_db_validate_connection or apache_superset_db_auto_create
  tags: ['superset', 'apache_superset_database']

- name: Derive database connection components
  ansible.builtin.set_fact:
    db_connection_database: "{{ db_connection_string.split('/')[-1] }}"
    db_connection_host: >-
      {{
        db_connection_string.split('@')[-1].split('/')[0].split(':')[0]
        if '@' in db_connection_string
        else 'localhost'
      }}
    db_connection_port: >-
      {{
        db_connection_string.split('@')[-1].split('/')[0].split(':')[1]
        if (
          '@' in db_connection_string
          and ':' in db_connection_string.split('@')[-1].split('/')[0]
        )
        else (5432 if db_type == 'postgresql' else 3306)
      }}
    db_connection_user: >-
      {{
        db_connection_string.split('@')[0].split(':')[0]
        if '@' in db_connection_string
        else ('postgres' if db_type == 'postgresql' else 'root')
      }}
    db_connection_password: >-
      {{
        db_connection_string.split('@')[0].split(':')[1]
        if (
          '@' in db_connection_string
          and ':' in db_connection_string.split('@')[0]
        )
        else ''
      }}
  when: apache_superset_db_validate_connection or apache_superset_db_auto_create
  tags: ['superset', 'apache_superset_database']

- name: Validate PostgreSQL database connection
  community.postgresql.postgresql_ping:
    db: "{{ db_connection_database }}"
    login_host: "{{ db_connection_host }}"
    login_port: "{{ db_connection_port }}"
    login_user: "{{ db_connection_user }}"
    login_password: "{{ db_connection_password }}"
  when:
    - apache_superset_db_validate_connection
    - db_type == 'postgresql'
  register: pg_connection_test
  failed_when: false
  tags: ['superset', 'apache_superset_database']

- name: Create PostgreSQL database if auto-create is enabled
  community.postgresql.postgresql_db:
    name: "{{ db_connection_database }}"
    login_host: "{{ db_connection_host }}"
    login_port: "{{ db_connection_port }}"
    login_user: "{{ db_connection_user }}"
    login_password: "{{ db_connection_password }}"
    state: present
  when:
    - apache_superset_db_auto_create
    - db_type == 'postgresql'
    - pg_connection_test is defined and pg_connection_test.failed
  tags: ['superset', 'apache_superset_database']

- name: Validate MySQL database connection
  community.mysql.mysql_info:
    login_host: "{{ db_connection_host }}"
    login_port: "{{ db_connection_port }}"
    login_user: "{{ db_connection_user }}"
    login_password: "{{ db_connection_password }}"
    login_db: "{{ db_connection_database }}"
  when:
    - apache_superset_db_validate_connection
    - db_type in ['mysql', 'mysql+pymysql']
  register: mysql_connection_test
  failed_when: false
  tags: ['superset', 'apache_superset_database']

- name: Create MySQL database if auto-create is enabled
  community.mysql.mysql_db:
    name: "{{ db_connection_database }}"
    login_host: "{{ db_connection_host }}"
    login_port: "{{ db_connection_port }}"
    login_user: "{{ db_connection_user }}"
    login_password: "{{ db_connection_password }}"
    state: present
  when:
    - apache_superset_db_auto_create
    - db_type in ['mysql', 'mysql+pymysql']
    - mysql_connection_test is defined and mysql_connection_test.failed
  tags: ['superset', 'apache_superset_database']

- name: Display database connection validation results
  ansible.builtin.debug:
    msg: >-
      Database connection validation {{
        'successful'
        if not (pg_connection_test.failed | default(false))
        and not (mysql_connection_test.failed | default(false))
        else 'failed'
      }}
  when: apache_superset_db_validate_connection
  tags: ['superset', 'apache_superset_database']
