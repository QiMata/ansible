#!/bin/bash
# Vault secret fetching script for NiFi

set -euo pipefail

VAULT_ADDR="{{ apache_nifi_vault_url }}"
SECRET_PATH="{{ apache_nifi_vault_secret_path }}"
VAULT_CONFIG_DIR="{{ apache_nifi_conf_dir }}/vault"
NIFI_CONF_DIR="{{ apache_nifi_conf_dir }}"

export VAULT_ADDR

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >&2
}

# Function to authenticate with Vault
authenticate() {
    if [[ -f "${VAULT_CONFIG_DIR}/.vault-token" ]]; then
        export VAULT_TOKEN=$(cat "${VAULT_CONFIG_DIR}/.vault-token")
        log "Using token authentication"
    elif [[ -f "${VAULT_CONFIG_DIR}/.role_id" && -f "${VAULT_CONFIG_DIR}/.secret_id" ]]; then
        local role_id=$(cat "${VAULT_CONFIG_DIR}/.role_id")
        local secret_id=$(cat "${VAULT_CONFIG_DIR}/.secret_id")
        
        log "Authenticating with AppRole"
        local response=$(vault write -format=json auth/approle/login \
            role_id="${role_id}" \
            secret_id="${secret_id}")
        
        export VAULT_TOKEN=$(echo "${response}" | jq -r '.auth.client_token')
        echo "${VAULT_TOKEN}" > "${VAULT_CONFIG_DIR}/.vault-token"
        chmod 600 "${VAULT_CONFIG_DIR}/.vault-token"
    else
        log "ERROR: No authentication method configured"
        exit 1
    fi
}

# Function to fetch secrets
fetch_secrets() {
    log "Fetching secrets from ${SECRET_PATH}"
    
    local secrets=$(vault kv get -format=json "${SECRET_PATH}")
    
    # Extract specific secrets for NiFi
    local keystore_password=$(echo "${secrets}" | jq -r '.data.data.keystore_password // empty')
    local truststore_password=$(echo "${secrets}" | jq -r '.data.data.truststore_password // empty')
    local ldap_bind_password=$(echo "${secrets}" | jq -r '.data.data.ldap_bind_password // empty')
    local sensitive_props_key=$(echo "${secrets}" | jq -r '.data.data.sensitive_props_key // empty')
    
    # Update NiFi configuration with secrets
    if [[ -n "${keystore_password}" ]]; then
        log "Updating keystore password"
        sed -i "s/nifi.security.keystore.passwd=.*/nifi.security.keystore.passwd=${keystore_password}/" \
            "${NIFI_CONF_DIR}/nifi.properties"
    fi
    
    if [[ -n "${truststore_password}" ]]; then
        log "Updating truststore password"
        sed -i "s/nifi.security.truststore.passwd=.*/nifi.security.truststore.passwd=${truststore_password}/" \
            "${NIFI_CONF_DIR}/nifi.properties"
    fi
    
    if [[ -n "${ldap_bind_password}" ]]; then
        log "Updating LDAP bind password"
        sed -i "s/Manager Password=.*/Manager Password=${ldap_bind_password}/" \
            "${NIFI_CONF_DIR}/login-identity-providers.xml"
    fi
    
    if [[ -n "${sensitive_props_key}" ]]; then
        log "Updating sensitive properties key"
        echo "${sensitive_props_key}" > "${NIFI_CONF_DIR}/nifi.sensitive.props.key"
        chmod 600 "${NIFI_CONF_DIR}/nifi.sensitive.props.key"
    fi
    
    log "Secrets updated successfully"
}

# Main execution
main() {
    log "Starting Vault secret fetch for NiFi"
    
    # Check if vault CLI is available
    if ! command -v vault &> /dev/null; then
        log "ERROR: Vault CLI not found"
        exit 1
    fi
    
    # Check if jq is available
    if ! command -v jq &> /dev/null; then
        log "ERROR: jq not found, installing..."
        apt-get update && apt-get install -y jq
    fi
    
    authenticate
    fetch_secrets
    
    log "Vault secret fetch completed"
}

main "$@"
