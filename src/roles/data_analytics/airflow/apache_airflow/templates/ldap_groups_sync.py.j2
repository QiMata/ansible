#!/usr/bin/env python3
"""
LDAP Groups Synchronization Script for Airflow
Syncs LDAP groups to Airflow roles automatically
"""
import os
import sys
import ldap
from airflow import settings
from airflow.models import User, Role
from airflow.www.security import AirflowSecurityManager
from flask_appbuilder import SQLA
from sqlalchemy.orm import sessionmaker

# Configuration
LDAP_SERVER = "{{ apache_airflow_ldap_server }}"
LDAP_PORT = {{ apache_airflow_ldap_port }}
LDAP_BIND_USER = "{{ apache_airflow_ldap_bind_user }}"
LDAP_BIND_PASSWORD = "{{ apache_airflow_ldap_bind_password }}"
LDAP_BASE_DN = "{{ apache_airflow_ldap_basedn }}"
LDAP_GROUP_FILTER = "{{ apache_airflow_ldap_group_filter }}"
LDAP_GROUP_MEMBER_ATTR = "{{ apache_airflow_ldap_group_member_attr }}"

# Role mappings
ROLE_MAPPINGS = {
{% for group in apache_airflow_ldap_admin_groups %}
    "{{ group }}": "Admin",
{% endfor %}
{% for group in apache_airflow_ldap_op_groups %}
    "{{ group }}": "Op",
{% endfor %}
{% for group in apache_airflow_ldap_user_groups %}
    "{{ group }}": "User",
{% endfor %}
{% for group in apache_airflow_ldap_viewer_groups %}
    "{{ group }}": "Viewer",
{% endfor %}
}

def connect_ldap():
    """Connect to LDAP server"""
    try:
        conn = ldap.initialize(f"{LDAP_SERVER}:{LDAP_PORT}")
        conn.simple_bind_s(LDAP_BIND_USER, LDAP_BIND_PASSWORD)
        return conn
    except Exception as e:
        print(f"LDAP connection failed: {e}")
        return None

def get_ldap_groups(conn):
    """Get all LDAP groups and their members"""
    groups = {}
    try:
        search_filter = f"(&{LDAP_GROUP_FILTER})"
        results = conn.search_s(LDAP_BASE_DN, ldap.SCOPE_SUBTREE, search_filter, 
                               ['cn', LDAP_GROUP_MEMBER_ATTR])
        
        for dn, attrs in results:
            if 'cn' in attrs:
                group_name = attrs['cn'][0].decode('utf-8')
                members = []
                if LDAP_GROUP_MEMBER_ATTR in attrs:
                    members = [member.decode('utf-8') for member in attrs[LDAP_GROUP_MEMBER_ATTR]]
                groups[group_name] = members
                
        return groups
    except Exception as e:
        print(f"Error getting LDAP groups: {e}")
        return {}

def sync_user_roles():
    """Synchronize user roles based on LDAP group membership"""
    conn = connect_ldap()
    if not conn:
        return False
    
    try:
        ldap_groups = get_ldap_groups(conn)
        session = settings.Session()
        
        # Get all users from Airflow database
        users = session.query(User).all()
        
        for user in users:
            username = user.username
            user_roles = set()
            
            # Check which groups the user belongs to
            for group_name, members in ldap_groups.items():
                if username in members and group_name in ROLE_MAPPINGS:
                    role_name = ROLE_MAPPINGS[group_name]
                    user_roles.add(role_name)
            
            # Update user roles
            if user_roles:
                # Clear existing roles
                user.roles = []
                
                # Add new roles
                for role_name in user_roles:
                    role = session.query(Role).filter_by(name=role_name).first()
                    if role:
                        user.roles.append(role)
                
                session.commit()
                print(f"Updated roles for user {username}: {', '.join(user_roles)}")
            
        session.close()
        conn.unbind()
        return True
        
    except Exception as e:
        print(f"Error syncing user roles: {e}")
        return False

if __name__ == "__main__":
    print("Starting LDAP groups synchronization...")
    success = sync_user_roles()
    if success:
        print("LDAP groups synchronization completed successfully")
        sys.exit(0)
    else:
        print("LDAP groups synchronization failed")
        sys.exit(1)
