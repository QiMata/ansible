#!/usr/bin/env python3
"""
Restore script for Amundsen Search Elasticsearch data
"""
import requests
import json
import datetime
import sys
import argparse
from typing import Dict, Any

def list_snapshots() -> Dict[str, Any]:
    """List available snapshots"""
    try:
        url = f"{{ amundsen_search_es_scheme }}://{{ amundsen_search_es_host }}:{{ amundsen_search_es_port }}/_snapshot/{{ amundsen_search_backup_repository }}/_all"
        
        {% if amundsen_search_es_auth_enabled and amundsen_search_es_auth_type == "basic" %}
        auth = ('{{ amundsen_search_es_username }}', '{{ amundsen_search_es_password }}')
        response = requests.get(url, auth=auth, timeout=60)
        {% else %}
        response = requests.get(url, timeout=60)
        {% endif %}
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"snapshots": []}
            
    except Exception as e:
        print(f"Error listing snapshots: {e}")
        return {"snapshots": []}

def restore_snapshot(snapshot_name: str, indices: str = "{{ amundsen_search_es_index }}*") -> Dict[str, Any]:
    """Restore a snapshot"""
    url = f"{{ amundsen_search_es_scheme }}://{{ amundsen_search_es_host }}:{{ amundsen_search_es_port }}/_snapshot/{{ amundsen_search_backup_repository }}/{snapshot_name}/_restore"
    
    body = {
        "indices": indices,
        "ignore_unavailable": True,
        "include_global_state": False,
        "rename_pattern": "(.+)",
        "rename_replacement": "restored_$1"
    }
    
    try:
        {% if amundsen_search_es_auth_enabled and amundsen_search_es_auth_type == "basic" %}
        auth = ('{{ amundsen_search_es_username }}', '{{ amundsen_search_es_password }}')
        response = requests.post(url, json=body, auth=auth, timeout=300)
        {% else %}
        response = requests.post(url, json=body, timeout=300)
        {% endif %}
        
        if response.status_code in [200, 202]:
            return {"status": "success", "response": response.json()}
        else:
            return {"status": "error", "message": response.text}
            
    except Exception as e:
        return {"status": "error", "message": str(e)}

def main():
    parser = argparse.ArgumentParser(description='Restore Amundsen Search data from snapshot')
    parser.add_argument('--snapshot', required=True, help='Snapshot name to restore')
    parser.add_argument('--indices', default="{{ amundsen_search_es_index }}*", help='Indices pattern to restore')
    parser.add_argument('--list', action='store_true', help='List available snapshots')
    
    args = parser.parse_args()
    
    if args.list:
        snapshots_data = list_snapshots()
        snapshots = snapshots_data.get('snapshots', [])
        
        print("Available snapshots:")
        for snapshot in snapshots:
            name = snapshot.get('snapshot', 'Unknown')
            state = snapshot.get('state', 'Unknown')
            start_time = snapshot.get('start_time', 'Unknown')
            print(f"  {name} - {state} - {start_time}")
        return
    
    print(f"Restoring snapshot: {args.snapshot}")
    result = restore_snapshot(args.snapshot, args.indices)
    
    if result["status"] == "success":
        print(f"Restore initiated successfully for snapshot: {args.snapshot}")
        print("Note: Indices will be restored with 'restored_' prefix")
    else:
        print(f"Restore failed: {result['message']}")
        sys.exit(1)

if __name__ == '__main__':
    main()
