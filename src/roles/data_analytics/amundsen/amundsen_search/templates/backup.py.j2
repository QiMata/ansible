#!/usr/bin/env python3
"""
Backup script for Amundsen Search Elasticsearch data
"""
import requests
import json
import datetime
from typing import Dict, Any

def create_snapshot(snapshot_name: str) -> Dict[str, Any]:
    """Create a snapshot of the search indices"""
    url = f"{{ amundsen_search_es_scheme }}://{{ amundsen_search_es_host }}:{{ amundsen_search_es_port }}/_snapshot/{{ amundsen_search_backup_repository }}/{snapshot_name}"
    
    body = {
        "indices": "{{ amundsen_search_es_index }}*",
        "ignore_unavailable": True,
        "include_global_state": False,
        "metadata": {
            "taken_by": "amundsen_search_backup",
            "taken_because": "Scheduled backup",
            "timestamp": datetime.datetime.now().isoformat()
        }
    }
    
    try:
        {% if amundsen_search_es_auth_enabled and amundsen_search_es_auth_type == "basic" %}
        auth = ('{{ amundsen_search_es_username }}', '{{ amundsen_search_es_password }}')
        response = requests.put(url, json=body, auth=auth, timeout=300)
        {% else %}
        response = requests.put(url, json=body, timeout=300)
        {% endif %}
        
        if response.status_code in [200, 202]:
            return {"status": "success", "snapshot": snapshot_name}
        else:
            return {"status": "error", "message": response.text}
            
    except Exception as e:
        return {"status": "error", "message": str(e)}

def main():
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    snapshot_name = f"amundsen_search_backup_{timestamp}"
    
    print(f"Creating backup snapshot: {snapshot_name}")
    result = create_snapshot(snapshot_name)
    
    if result["status"] == "success":
        print(f"Backup created successfully: {snapshot_name}")
    else:
        print(f"Backup failed: {result['message']}")
        exit(1)

if __name__ == '__main__':
    main()
