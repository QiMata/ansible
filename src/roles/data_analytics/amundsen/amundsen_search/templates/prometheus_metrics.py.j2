#!/usr/bin/env python3
"""
Prometheus metrics collection for Amundsen Search
"""
import time
import requests
from prometheus_client import start_http_server, Gauge, Counter, Histogram

# Metrics definitions
search_requests_total = Counter('amundsen_search_requests_total', 'Total search requests', ['status'])
search_request_duration = Histogram('amundsen_search_request_duration_seconds', 'Search request duration')
elasticsearch_health = Gauge('amundsen_search_elasticsearch_health', 'Elasticsearch cluster health')
service_uptime = Gauge('amundsen_search_uptime_seconds', 'Service uptime in seconds')

def collect_metrics():
    """Collect and update metrics"""
    try:
        # Check service health
        response = requests.get('http://{{ amundsen_search_bind_host }}:{{ amundsen_search_port }}{{ amundsen_search_lb_health_check_path }}', timeout=5)
        if response.status_code == 200:
            search_requests_total.labels(status='success').inc()
        else:
            search_requests_total.labels(status='error').inc()
        
        # Check Elasticsearch health
        es_response = requests.get('{{ amundsen_search_es_scheme }}://{{ amundsen_search_es_host }}:{{ amundsen_search_es_port }}/_cluster/health', timeout=5)
        if es_response.status_code == 200:
            health_data = es_response.json()
            health_status = health_data.get('status')
            if health_status == 'green':
                elasticsearch_health.set(1)
            elif health_status == 'yellow':
                elasticsearch_health.set(0.5)
            else:
                elasticsearch_health.set(0)
        else:
            elasticsearch_health.set(0)
            
    except Exception as e:
        print(f"Error collecting metrics: {e}")
        search_requests_total.labels(status='error').inc()
        elasticsearch_health.set(0)

if __name__ == '__main__':
    # Start Prometheus metrics server
    start_http_server({{ amundsen_search_prometheus_port }})
    print(f"Prometheus metrics server started on port {{ amundsen_search_prometheus_port }}")
    
    start_time = time.time()
    
    while True:
        service_uptime.set(time.time() - start_time)
        collect_metrics()
        time.sleep(30)  # Collect metrics every 30 seconds
